!function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=17)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (element) {\n    var position = element && element.length ? element.offset().top : 0;\n    $('html, body').animate({\n        scrollTop: position\n    }, 500);\n    if (!element) {\n        $('.logo-home').focus();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWMuY2h1L3NmcmEvT1NYL3N0b3JlZnJvbnQtcmVmZXJlbmNlLWFyY2hpdGVjdHVyZS9jYXJ0cmlkZ2VzL2FwcF9zdG9yZWZyb250X2Jhc2UvY2FydHJpZGdlL2NsaWVudC9kZWZhdWx0L2pzL2NvbXBvbmVudHMvc2Nyb2xsQW5pbWF0ZS5qcz82NmNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBlbGVtZW50ICYmIGVsZW1lbnQubGVuZ3RoID8gZWxlbWVudC5vZmZzZXQoKS50b3AgOiAwO1xuICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgc2Nyb2xsVG9wOiBwb3NpdGlvblxuICAgIH0sIDUwMCk7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICQoJy5sb2dvLWhvbWUnKS5mb2N1cygpO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Populate the Billing Address Summary View\n * @param {string} parentSelector - the top level DOM selector for a unique address summary\n * @param {Object} address - the address data\n */\nfunction populateAddressSummary(parentSelector, address) {\n    $.each(address, function (attr) {\n        var val = address[attr];\n        $('.' + attr, parentSelector).text(val || '');\n    });\n}\n\n/**\n * returns a formed <option /> element\n * @param {Object} shipping - the shipping object (shipment model)\n * @param {boolean} selected - current shipping is selected (for PLI)\n * @param {order} order - the Order model\n * @param {Object} [options] - options\n * @returns {Object} - the jQuery / DOMElement\n */\nfunction optionValueForAddress(shipping, selected, order, options) {\n    var safeOptions = options || {};\n    var isBilling = safeOptions.type && safeOptions.type === 'billing';\n    var className = safeOptions.className || '';\n    var isSelected = selected;\n    var isNew = !shipping;\n    if (typeof shipping === 'string') {\n        return $('<option class=\"' + className + '\" disabled>' + shipping + '</option>');\n    }\n    var safeShipping = shipping || {};\n    var shippingAddress = safeShipping.shippingAddress || {};\n\n    if (isBilling && isNew && !order.billing.matchingAddressId) {\n        shippingAddress = order.billing.billingAddress.address || {};\n        isNew = false;\n        isSelected = true;\n        safeShipping.UUID = 'manual-entry';\n    }\n\n    var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';\n    var optionEl = $('<option class=\"' + className + '\" />');\n    optionEl.val(uuid);\n\n    var title;\n\n    if (isNew) {\n        title = order.resources.addNewAddress;\n    } else {\n        title = [];\n        if (shippingAddress.firstName) {\n            title.push(shippingAddress.firstName);\n        }\n        if (shippingAddress.lastName) {\n            title.push(shippingAddress.lastName);\n        }\n        if (shippingAddress.address1) {\n            title.push(shippingAddress.address1);\n        }\n        if (shippingAddress.address2) {\n            title.push(shippingAddress.address2);\n        }\n        if (shippingAddress.city) {\n            if (shippingAddress.state) {\n                title.push(shippingAddress.city + ',');\n            } else {\n                title.push(shippingAddress.city);\n            }\n        }\n        if (shippingAddress.stateCode) {\n            title.push(shippingAddress.stateCode);\n        }\n        if (shippingAddress.postalCode) {\n            title.push(shippingAddress.postalCode);\n        }\n        if (!isBilling && safeShipping.selectedShippingMethod) {\n            title.push('-');\n            title.push(safeShipping.selectedShippingMethod.displayName);\n        }\n\n        if (title.length > 2) {\n            title = title.join(' ');\n        } else {\n            title = order.resources.newAddress;\n        }\n    }\n    optionEl.text(title);\n\n    var keyMap = {\n        'data-first-name': 'firstName',\n        'data-last-name': 'lastName',\n        'data-address1': 'address1',\n        'data-address2': 'address2',\n        'data-city': 'city',\n        'data-state-code': 'stateCode',\n        'data-postal-code': 'postalCode',\n        'data-country-code': 'countryCode',\n        'data-phone': 'phone'\n    };\n    $.each(keyMap, function (key) {\n        var mappedKey = keyMap[key];\n        var mappedValue = shippingAddress[mappedKey];\n        // In case of country code\n        if (mappedValue && typeof mappedValue === 'object') {\n            mappedValue = mappedValue.value;\n        }\n\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    var giftObj = {\n        'data-is-gift': 'isGift',\n        'data-gift-message': 'giftMessage'\n    };\n\n    $.each(giftObj, function (key) {\n        var mappedKey = giftObj[key];\n        var mappedValue = safeShipping[mappedKey];\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    if (isSelected) {\n        optionEl.attr('selected', true);\n    }\n\n    return optionEl;\n}\n\n/**\n * returns address properties from a UI form\n * @param {Form} form - the Form element\n * @returns {Object} - a JSON object with all values\n */\nfunction getAddressFieldsFromUI(form) {\n    var address = {\n        firstName: $('input[name$=_firstName]', form).val(),\n        lastName: $('input[name$=_lastName]', form).val(),\n        address1: $('input[name$=_address1]', form).val(),\n        address2: $('input[name$=_address2]', form).val(),\n        city: $('input[name$=_city]', form).val(),\n        postalCode: $('input[name$=_postalCode]', form).val(),\n        stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),\n        countryCode: $('select[name$=_country]', form).val(),\n        phone: $('input[name$=_phone]', form).val()\n    };\n    return address;\n}\n\nmodule.exports = {\n    methods: {\n        populateAddressSummary: populateAddressSummary,\n        optionValueForAddress: optionValueForAddress,\n        getAddressFieldsFromUI: getAddressFieldsFromUI\n    },\n\n    showDetails: function () {\n        $('.btn-show-details').on('click', function () {\n            var form = $(this).closest('form');\n\n            form.attr('data-address-mode', 'details');\n            form.find('.multi-ship-address-actions').removeClass('d-none');\n            form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');\n        });\n    },\n\n    addNewAddress: function () {\n        $('.btn-add-new').on('click', function () {\n            var $el = $(this);\n            if ($el.parents('#dwfrm_billing').length > 0) {\n                // Handle billing address case\n                $('body').trigger('checkout:clearBillingForm');\n                var $option = $($el.parents('form').find('.addressSelector option')[0]);\n                $option.attr('value', 'new');\n                var $newTitle = $('#dwfrm_billing input[name=localizedNewAddressTitle]').val();\n                $option.text($newTitle);\n                $option.prop('selected', 'selected');\n                $el.parents('[data-address-mode]').attr('data-address-mode', 'new');\n            } else {\n                // Handle shipping address case\n                var $newEl = $el.parents('form').find('.addressSelector option[value=new]');\n                $newEl.prop('selected', 'selected');\n                $newEl.parent().trigger('change');\n            }\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar scrollAnimate = __webpack_require__(0);\n\n/**\n * Display error messages and highlight form fields with errors.\n * @param {string} parentSelector - the form which contains the fields\n * @param {Object} fieldErrors - the fields with errors\n */\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\n    // Display error messages and highlight form fields with errors.\n    $.each(fieldErrors, function (attr) {\n        $('*[name=' + attr + ']', parentSelector)\n            .addClass('is-invalid')\n            .siblings('.invalid-feedback')\n            .html(fieldErrors[attr]);\n    });\n    // Animate to top of form that has errors\n    scrollAnimate($(parentSelector));\n}\n\n/**\n * Clear the form errors.\n * @param {string} parentSelector - the parent form selector.\n */\nfunction clearPreviousErrors(parentSelector) {\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\n    $('.error-message').hide();\n}\n\nmodule.exports = {\n    loadFormErrors: loadFormErrors,\n    clearPreviousErrors: clearPreviousErrors\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWMuY2h1L3NmcmEvT1NYL3N0b3JlZnJvbnQtcmVmZXJlbmNlLWFyY2hpdGVjdHVyZS9jYXJ0cmlkZ2VzL2FwcF9zdG9yZWZyb250X2Jhc2UvY2FydHJpZGdlL2NsaWVudC9kZWZhdWx0L2pzL2NoZWNrb3V0L2Zvcm1FcnJvcnMuanM/ZGJjMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyxDQUE2Qjs7QUFFekQ7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHNjcm9sbEFuaW1hdGUgPSByZXF1aXJlKCcuLi9jb21wb25lbnRzL3Njcm9sbEFuaW1hdGUnKTtcblxuLyoqXG4gKiBEaXNwbGF5IGVycm9yIG1lc3NhZ2VzIGFuZCBoaWdobGlnaHQgZm9ybSBmaWVsZHMgd2l0aCBlcnJvcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50U2VsZWN0b3IgLSB0aGUgZm9ybSB3aGljaCBjb250YWlucyB0aGUgZmllbGRzXG4gKiBAcGFyYW0ge09iamVjdH0gZmllbGRFcnJvcnMgLSB0aGUgZmllbGRzIHdpdGggZXJyb3JzXG4gKi9cbmZ1bmN0aW9uIGxvYWRGb3JtRXJyb3JzKHBhcmVudFNlbGVjdG9yLCBmaWVsZEVycm9ycykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgLy8gRGlzcGxheSBlcnJvciBtZXNzYWdlcyBhbmQgaGlnaGxpZ2h0IGZvcm0gZmllbGRzIHdpdGggZXJyb3JzLlxuICAgICQuZWFjaChmaWVsZEVycm9ycywgZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgJCgnKltuYW1lPScgKyBhdHRyICsgJ10nLCBwYXJlbnRTZWxlY3RvcilcbiAgICAgICAgICAgIC5hZGRDbGFzcygnaXMtaW52YWxpZCcpXG4gICAgICAgICAgICAuc2libGluZ3MoJy5pbnZhbGlkLWZlZWRiYWNrJylcbiAgICAgICAgICAgIC5odG1sKGZpZWxkRXJyb3JzW2F0dHJdKTtcbiAgICB9KTtcbiAgICAvLyBBbmltYXRlIHRvIHRvcCBvZiBmb3JtIHRoYXQgaGFzIGVycm9yc1xuICAgIHNjcm9sbEFuaW1hdGUoJChwYXJlbnRTZWxlY3RvcikpO1xufVxuXG4vKipcbiAqIENsZWFyIHRoZSBmb3JtIGVycm9ycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRTZWxlY3RvciAtIHRoZSBwYXJlbnQgZm9ybSBzZWxlY3Rvci5cbiAqL1xuZnVuY3Rpb24gY2xlYXJQcmV2aW91c0Vycm9ycyhwYXJlbnRTZWxlY3Rvcikge1xuICAgICQocGFyZW50U2VsZWN0b3IpLmZpbmQoJy5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCcpLnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgJCgnLmVycm9yLW1lc3NhZ2UnKS5oaWRlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGxvYWRGb3JtRXJyb3JzOiBsb2FkRm9ybUVycm9ycyxcbiAgICBjbGVhclByZXZpb3VzRXJyb3JzOiBjbGVhclByZXZpb3VzRXJyb3JzXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = function (include) {\n    if (typeof include === 'function') {\n        include();\n    } else if (typeof include === 'object') {\n        Object.keys(include).forEach(function (key) {\n            if (typeof include[key] === 'function') {\n                include[key]();\n            }\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWMuY2h1L3NmcmEvT1NYL3N0b3JlZnJvbnQtcmVmZXJlbmNlLWFyY2hpdGVjdHVyZS9jYXJ0cmlkZ2VzL2FwcF9zdG9yZWZyb250X2Jhc2UvY2FydHJpZGdlL2NsaWVudC9kZWZhdWx0L2pzL3V0aWwuanM/YTA2OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmNsdWRlKSB7XG4gICAgaWYgKHR5cGVvZiBpbmNsdWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluY2x1ZGUoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbmNsdWRlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3Qua2V5cyhpbmNsdWRlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5jbHVkZVtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaW5jbHVkZVtrZXldKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar addressHelpers = __webpack_require__(1);\nvar shippingHelpers = __webpack_require__(5);\nvar billingHelpers = __webpack_require__(6);\nvar summaryHelpers = __webpack_require__(10);\nvar formHelpers = __webpack_require__(2);\nvar scrollAnimate = __webpack_require__(0);\n\n\n/**\n * Create the jQuery Checkout Plugin.\n *\n * This jQuery plugin will be registered on the dom element in checkout.isml with the\n * id of \"checkout-main\".\n *\n * The checkout plugin will handle the different state the user interface is in as the user\n * progresses through the varying forms such as shipping and payment.\n *\n * Billing info and payment info are used a bit synonymously in this code.\n *\n */\n(function ($) {\n    $.fn.checkout = function () { // eslint-disable-line\n        var plugin = this;\n\n        //\n        // Collect form data from user input\n        //\n        var formData = {\n            // Shipping Address\n            shipping: {},\n\n            // Billing Address\n            billing: {},\n\n            // Payment\n            payment: {},\n\n            // Gift Codes\n            giftCode: {}\n        };\n\n        //\n        // The different states/stages of checkout\n        //\n        var checkoutStages = [\n            'shipping',\n            'payment',\n            'placeOrder',\n            'submitted'\n        ];\n\n        /**\n         * Updates the URL to determine stage\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\n         */\n        function updateUrl(currentStage) {\n            history.pushState(\n                checkoutStages[currentStage],\n                document.title,\n                location.pathname\n                + '?stage='\n                + checkoutStages[currentStage]\n                + '#'\n                + checkoutStages[currentStage]\n            );\n        }\n\n        //\n        // Local member methods of the Checkout plugin\n        //\n        var members = {\n\n            // initialize the currentStage variable for the first time\n            currentStage: 0,\n\n            /**\n             * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)\n             * @returns {Object} a promise\n             */\n            updateStage: function () {\n                var stage = checkoutStages[members.currentStage];\n                var defer = $.Deferred(); // eslint-disable-line\n\n                if (stage === 'shipping') {\n                    //\n                    // Clear Previous Errors\n                    //\n                    formHelpers.clearPreviousErrors('.shipping-form');\n\n                    //\n                    // Submit the Shipping Address Form\n                    //\n                    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n                    var formSelector = isMultiShip ?\n                        '.multi-shipping .active form' : '.single-shipping .shipping-form';\n                    var form = $(formSelector);\n\n                    if (isMultiShip && form.length === 0) {\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        // in case the multi ship form is already submitted\n                        var url = $('#checkout-main').attr('data-checkout-get-url');\n                        $.ajax({\n                            url: url,\n                            method: 'GET',\n                            success: function (data) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (!data.error) {\n                                    $('body').trigger('checkout:updateCheckoutView',\n                                        { order: data.order, customer: data.customer });\n                                    defer.resolve();\n                                } else if (data.message && $('.shipping-error .alert-danger').length < 1) {\n                                    var errorMsg = data.message;\n                                    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\n                                        'fade show\" role=\"alert\">' +\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\n                                        '<span aria-hidden=\"true\">&times;</span>' +\n                                        '</button>' + errorMsg + '</div>';\n                                    $('.shipping-error').append(errorHtml);\n                                    scrollAnimate($('.shipping-error'));\n                                    defer.reject();\n                                } else if (data.redirectUrl) {\n                                    window.location.href = data.redirectUrl;\n                                }\n                            },\n                            error: function () {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                // Server error submitting form\n                                defer.reject();\n                            }\n                        });\n                    } else {\n                        var shippingFormData = form.serialize();\n\n                        $('body').trigger('checkout:serializeShipping', {\n                            form: form,\n                            data: shippingFormData,\n                            callback: function (data) {\n                                shippingFormData = data;\n                            }\n                        });\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        $.ajax({\n                            url: form.attr('action'),\n                            type: 'post',\n                            data: shippingFormData,\n                            success: function (data) {\n                                 // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                shippingHelpers.methods.shippingFormResponse(defer, data);\n                            },\n                            error: function (err) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                    window.location.href = err.responseJSON.redirectUrl;\n                                }\n                                // Server error submitting form\n                                defer.reject(err.responseJSON);\n                            }\n                        });\n                    }\n                    return defer;\n                } else if (stage === 'payment') {\n                    //\n                    // Submit the Billing Address Form\n                    //\n\n                    formHelpers.clearPreviousErrors('.payment-form');\n\n                    var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $('#dwfrm_billing .billing-address-block'),\n                        data: billingAddressForm,\n                        callback: function (data) {\n                            if (data) {\n                                billingAddressForm = data;\n                            }\n                        }\n                    });\n\n                    var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $('#dwfrm_billing .contact-info-block'),\n                        data: contactInfoForm,\n                        callback: function (data) {\n                            if (data) {\n                                contactInfoForm = data;\n                            }\n                        }\n                    });\n\n                    var activeTabId = $('.tab-pane.active').attr('id');\n                    var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\n                    var paymentInfoForm = $(paymentInfoSelector).serialize();\n\n                    $('body').trigger('checkout:serializeBilling', {\n                        form: $(paymentInfoSelector),\n                        data: paymentInfoForm,\n                        callback: function (data) {\n                            if (data) {\n                                paymentInfoForm = data;\n                            }\n                        }\n                    });\n\n                    var paymentForm = billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\n\n                    if ($('.data-checkout-stage').data('customer-type') === 'registered') {\n                        // if payment method is credit card\n                        if ($('.payment-information').data('payment-method-id') === 'CREDIT_CARD') {\n                            if (!($('.payment-information').data('is-new-payment'))) {\n                                var cvvCode = $('.saved-payment-instrument.' +\n                                    'selected-payment .saved-payment-security-code').val();\n\n                                if (cvvCode === '') {\n                                    var cvvElement = $('.saved-payment-instrument.' +\n                                        'selected-payment ' +\n                                        '.form-control');\n                                    cvvElement.addClass('is-invalid');\n                                    scrollAnimate(cvvElement);\n                                    defer.reject();\n                                    return defer;\n                                }\n\n                                var $savedPaymentInstrument = $('.saved-payment-instrument' +\n                                    '.selected-payment'\n                                );\n\n                                paymentForm += '&storedPaymentUUID=' +\n                                    $savedPaymentInstrument.data('uuid');\n\n                                paymentForm += '&securityCode=' + cvvCode;\n                            }\n                        }\n                    }\n                     // disable the next:Place Order button here\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\n\n                    $.ajax({\n                        url: $('#dwfrm_billing').attr('action'),\n                        method: 'POST',\n                        data: paymentForm,\n                        success: function (data) {\n                             // enable the next:Place Order button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            // look for field validation errors\n                            if (data.error) {\n                                if (data.fieldErrors.length) {\n                                    data.fieldErrors.forEach(function (error) {\n                                        if (Object.keys(error).length) {\n                                            formHelpers.loadFormErrors('.payment-form', error);\n                                        }\n                                    });\n                                }\n\n                                if (data.serverErrors.length) {\n                                    data.serverErrors.forEach(function (error) {\n                                        $('.error-message').show();\n                                        $('.error-message-text').text(error);\n                                        scrollAnimate($('.error-message'));\n                                    });\n                                }\n\n                                if (data.cartError) {\n                                    window.location.href = data.redirectUrl;\n                                }\n\n                                defer.reject();\n                            } else {\n                                //\n                                // Populate the Address Summary\n                                //\n                                $('body').trigger('checkout:updateCheckoutView',\n                                    { order: data.order, customer: data.customer });\n\n                                if (data.renderedPaymentInstruments) {\n                                    $('.stored-payments').empty().html(\n                                        data.renderedPaymentInstruments\n                                    );\n                                }\n\n                                if (data.customer.registeredUser\n                                    && data.customer.customerPaymentInstruments.length\n                                ) {\n                                    $('.cancel-new-payment').removeClass('checkout-hidden');\n                                }\n\n                                scrollAnimate();\n                                defer.resolve(data);\n                            }\n                        },\n                        error: function (err) {\n                            // enable the next:Place Order button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                window.location.href = err.responseJSON.redirectUrl;\n                            }\n                        }\n                    });\n\n                    return defer;\n                } else if (stage === 'placeOrder') {\n                    // disable the placeOrder button here\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\n                    $.ajax({\n                        url: $('.place-order').data('action'),\n                        method: 'POST',\n                        success: function (data) {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            if (data.error) {\n                                if (data.cartError) {\n                                    window.location.href = data.redirectUrl;\n                                    defer.reject();\n                                } else {\n                                    // go to appropriate stage and display error message\n                                    defer.reject(data);\n                                }\n                            } else {\n                                var continueUrl = data.continueUrl;\n                                var urlParams = {\n                                    ID: data.orderID,\n                                    token: data.orderToken\n                                };\n\n                                continueUrl += (continueUrl.indexOf('?') !== -1 ? '&' : '?') +\n                                    Object.keys(urlParams).map(function (key) {\n                                        return key + '=' + encodeURIComponent(urlParams[key]);\n                                    }).join('&');\n\n                                window.location.href = continueUrl;\n                                defer.resolve(data);\n                            }\n                        },\n                        error: function () {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', $('.next-step-button button'));\n                        }\n                    });\n\n                    return defer;\n                }\n                var p = $('<div>').promise(); // eslint-disable-line\n                setTimeout(function () {\n                    p.done(); // eslint-disable-line\n                }, 500);\n                return p; // eslint-disable-line\n            },\n\n            /**\n             * Initialize the checkout stage.\n             *\n             * TODO: update this to allow stage to be set from server?\n             */\n            initialize: function () {\n                // set the initial state of checkout\n                members.currentStage = checkoutStages\n                    .indexOf($('.data-checkout-stage').data('checkout-stage'));\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n\n                //\n                // Handle Payment option selection\n                //\n                $('input[name$=\"paymentMethod\"]', plugin).on('change', function () {\n                    $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');\n                });\n\n                //\n                // Handle Next State button click\n                //\n                $(plugin).on('click', '.next-step-button button', function () {\n                    members.nextStage();\n                });\n\n                //\n                // Handle Edit buttons on shipping and payment summary cards\n                //\n                $('.shipping-summary .edit-button', plugin).on('click', function () {\n                    if (!$('#checkout-main').hasClass('multi-ship')) {\n                        $('body').trigger('shipping:selectSingleShipping');\n                    }\n\n                    members.gotoStage('shipping');\n                });\n\n                $('.payment-summary .edit-button', plugin).on('click', function () {\n                    members.gotoStage('payment');\n                });\n\n                //\n                // remember stage (e.g. shipping)\n                //\n                updateUrl(members.currentStage);\n\n                //\n                // Listen for foward/back button press and move to correct checkout-stage\n                //\n                $(window).on('popstate', function (e) {\n                    //\n                    // Back button when event state less than current state in ordered\n                    // checkoutStages array.\n                    //\n                    if (e.state === null ||\n                        checkoutStages.indexOf(e.state) < members.currentStage) {\n                        members.handlePrevStage(false);\n                    } else if (checkoutStages.indexOf(e.state) > members.currentStage) {\n                        // Forward button  pressed\n                        members.handleNextStage(false);\n                    }\n                });\n\n                //\n                // Set the form data\n                //\n                plugin.data('formData', formData);\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             */\n            nextStage: function () {\n                var promise = members.updateStage();\n\n                promise.done(function () {\n                    // Update UI with new stage\n                    members.handleNextStage(true);\n                });\n\n                promise.fail(function (data) {\n                    // show errors\n                    if (data) {\n                        if (data.errorStage) {\n                            members.gotoStage(data.errorStage.stage);\n\n                            if (data.errorStage.step === 'billingAddress') {\n                                var $billingAddressSameAsShipping = $(\n                                    'input[name$=\"_shippingAddressUseAsBillingAddress\"]'\n                                );\n                                if ($billingAddressSameAsShipping.is(':checked')) {\n                                    $billingAddressSameAsShipping.prop('checked', false);\n                                }\n                            }\n                        }\n\n                        if (data.errorMessage) {\n                            $('.error-message').show();\n                            $('.error-message-text').text(data.errorMessage);\n                        }\n                    }\n                });\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             *\n             * @param {boolean} bPushState - boolean when true pushes state using the history api.\n             */\n            handleNextStage: function (bPushState) {\n                if (members.currentStage < checkoutStages.length - 1) {\n                    // move stage forward\n                    members.currentStage++;\n\n                    //\n                    // show new stage in url (e.g.payment)\n                    //\n                    if (bPushState) {\n                        updateUrl(members.currentStage);\n                    }\n                }\n\n                // Set the next stage on the DOM\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Previous State\n             */\n            handlePrevStage: function () {\n                if (members.currentStage > 0) {\n                    // move state back\n                    members.currentStage--;\n                    updateUrl(members.currentStage);\n                }\n\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Use window history to go to a checkout stage\n             * @param {string} stageName - the checkout state to goto\n             */\n            gotoStage: function (stageName) {\n                members.currentStage = checkoutStages.indexOf(stageName);\n                updateUrl(members.currentStage);\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            }\n        };\n\n        //\n        // Initialize the checkout\n        //\n        members.initialize();\n\n        return this;\n    };\n}(jQuery));\n\n\nvar exports = {\n    initialize: function () {\n        $('#checkout-main').checkout();\n    },\n\n    updateCheckoutView: function () {\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            shippingHelpers.methods.updateMultiShipInformation(data.order);\n            summaryHelpers.updateTotals(data.order.totals);\n            data.order.shipping.forEach(function (shipping) {\n                shippingHelpers.methods.updateShippingInformation(\n                    shipping,\n                    data.order,\n                    data.customer,\n                    data.options\n                );\n            });\n            billingHelpers.methods.updateBillingInformation(\n                data.order,\n                data.customer,\n                data.options\n            );\n            billingHelpers.methods.updatePaymentInformation(data.order, data.options);\n            summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\n        });\n    },\n\n    disableButton: function () {\n        $('body').on('checkout:disableButton', function (e, button) {\n            $(button).prop('disabled', true);\n        });\n    },\n\n    enableButton: function () {\n        $('body').on('checkout:enableButton', function (e, button) {\n            $(button).prop('disabled', false);\n        });\n    }\n\n\n};\n\n[billingHelpers, shippingHelpers, addressHelpers].forEach(function (library) {\n    Object.keys(library).forEach(function (item) {\n        if (typeof library[item] === 'object') {\n            exports[item] = $.extend({}, exports[item], library[item]);\n        } else {\n            exports[item] = library[item];\n        }\n    });\n});\n\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar addressHelpers = __webpack_require__(1);\nvar formHelpers = __webpack_require__(2);\nvar scrollAnimate = __webpack_require__(0);\n\n/**\n * updates the shipping address selector within shipping forms\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\n    var uuidEl = $('input[value=' + productLineItem.UUID + ']');\n    var shippings = order.shipping;\n\n    var form;\n    var $shippingAddressSelector;\n    var hasSelectedAddress = false;\n\n    if (uuidEl && uuidEl.length > 0) {\n        form = uuidEl[0].form;\n        $shippingAddressSelector = $('.addressSelector', form);\n    }\n\n    if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {\n        $shippingAddressSelector.empty();\n        // Add New Address option\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order\n        ));\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n                order.resources.accountAddresses,\n                false,\n                order\n            ));\n\n            customer.addresses.forEach(function (address) {\n                var isSelected = shipping.matchingAddressId === address.ID;\n                $shippingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress(\n                        { UUID: 'ab_' + address.ID, shippingAddress: address },\n                        isSelected,\n                        order\n                    )\n                );\n            });\n        }\n        // Separator -\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            order.resources.shippingAddresses, false, order, { className: 'multi-shipping' }\n        ));\n        shippings.forEach(function (aShipping) {\n            var isSelected = shipping.UUID === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            var addressOption = addressHelpers.methods.optionValueForAddress(\n                aShipping,\n                isSelected,\n                order,\n                { className: 'multi-shipping' }\n            );\n\n            var newAddress = addressOption.html() === order.resources.addNewAddress;\n            var matchingUUID = aShipping.UUID === shipping.UUID;\n            if ((newAddress && matchingUUID) || (!newAddress && matchingUUID) || (!newAddress && !matchingUUID)) {\n                $shippingAddressSelector.append(addressOption);\n            }\n            if (newAddress && !matchingUUID) {\n                $(addressOption[0]).remove();\n            }\n        });\n    }\n\n    if (!hasSelectedAddress) {\n        // show\n        $(form).addClass('hide-details');\n    } else {\n        $(form).removeClass('hide-details');\n    }\n\n    $('body').trigger('shipping:updateShippingAddressSelector', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        customer: customer\n    });\n}\n\n/**\n * updates the shipping address form values within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingAddressFormValues(shipping) {\n    var addressObject = $.extend({}, shipping.shippingAddress);\n\n    if (!addressObject) {\n        addressObject = {\n            firstName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            city: null,\n            postalCode: null,\n            stateCode: null,\n            countryCode: null,\n            phone: null\n        };\n    }\n\n    addressObject.isGift = shipping.isGift;\n    addressObject.giftMessage = shipping.giftMessage;\n\n    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n        var form = el.form;\n        if (!form) return;\n        var countryCode = addressObject.countryCode;\n\n        $('input[name$=_firstName]', form).val(addressObject.firstName);\n        $('input[name$=_lastName]', form).val(addressObject.lastName);\n        $('input[name$=_address1]', form).val(addressObject.address1);\n        $('input[name$=_address2]', form).val(addressObject.address2);\n        $('input[name$=_city]', form).val(addressObject.city);\n        $('input[name$=_postalCode]', form).val(addressObject.postalCode);\n        $('select[name$=_stateCode],input[name$=_stateCode]', form)\n            .val(addressObject.stateCode);\n\n        if (countryCode && typeof countryCode === 'object') {\n            $('select[name$=_country]', form).val(addressObject.countryCode.value);\n        } else {\n            $('select[name$=_country]', form).val(addressObject.countryCode);\n        }\n\n        $('input[name$=_phone]', form).val(addressObject.phone);\n\n        $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);\n        $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');\n    });\n\n    $('body').trigger('shipping:updateShippingAddressFormValues', { shipping: shipping });\n}\n\n/**\n * updates the shipping method radio buttons within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingMethods(shipping) {\n    var uuidEl = $('input[value=' + shipping.UUID + ']');\n    if (uuidEl && uuidEl.length > 0) {\n        $.each(uuidEl, function (shipmentIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            var $shippingMethodList = $('.shipping-method-list', form);\n\n            if ($shippingMethodList && $shippingMethodList.length > 0) {\n                $shippingMethodList.empty();\n                var shippingMethods = shipping.applicableShippingMethods;\n                var selected = shipping.selectedShippingMethod || {};\n                var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID';\n                //\n                // Create the new rows for each shipping method\n                //\n                $.each(shippingMethods, function (methodIndex, shippingMethod) {\n                    var tmpl = $('#shipping-method-template').clone();\n                    // set input\n                    $('input', tmpl)\n                        .prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID)\n                        .prop('name', shippingMethodFormID)\n                        .prop('value', shippingMethod.ID)\n                        .attr('checked', shippingMethod.ID === selected.ID);\n\n                    $('label', tmpl)\n                        .prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID);\n                    // set shipping method name\n                    $('.display-name', tmpl).text(shippingMethod.displayName);\n                    // set or hide arrival time\n                    if (shippingMethod.estimatedArrivalTime) {\n                        $('.arrival-time', tmpl)\n                            .text('(' + shippingMethod.estimatedArrivalTime + ')')\n                            .show();\n                    }\n                    // set shipping cost\n                    $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);\n                    $shippingMethodList.append(tmpl.html());\n                });\n            }\n        });\n    }\n\n    $('body').trigger('shipping:updateShippingMethods', { shipping: shipping });\n}\n\n/**\n * Update list of available shipping methods whenever user modifies shipping address details.\n * @param {jQuery} $shippingForm - current shipping form\n */\nfunction updateShippingMethodList($shippingForm) {\n    // delay for autocomplete!\n    setTimeout(function () {\n        var $shippingMethodList = $shippingForm.find('.shipping-method-list');\n        var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n        var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n        var url = $shippingMethodList.data('actionUrl');\n        urlParams.shipmentUUID = shipmentUUID;\n\n        $shippingMethodList.spinner().start();\n        $.ajax({\n            url: url,\n            type: 'post',\n            dataType: 'json',\n            data: urlParams,\n            success: function (data) {\n                if (data.error) {\n                    window.location.href = data.redirectUrl;\n                } else {\n                    $('body').trigger('checkout:updateCheckoutView',\n                        {\n                            order: data.order,\n                            customer: data.customer,\n                            options: { keepOpen: true }\n                        });\n\n                    $shippingMethodList.spinner().stop();\n                }\n            }\n        });\n    }, 300);\n}\n\n/**\n * updates the order shipping summary for an order shipment model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n */\nfunction updateShippingSummaryInformation(shipping, order) {\n    $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {\n        var $container = $(el);\n        var $shippingAddressLabel = $container.find('.shipping-addr-label');\n        var $addressContainer = $container.find('.address-summary');\n        var $shippingPhone = $container.find('.shipping-phone');\n        var $methodTitle = $container.find('.shipping-method-title');\n        var $methodArrivalTime = $container.find('.shipping-method-arrival-time');\n        var $methodPrice = $container.find('.shipping-method-price');\n        var $shippingSummaryLabel = $container.find('.shipping-method-label');\n        var $summaryDetails = $container.find('.row.summary-details');\n        var giftMessageSummary = $container.find('.gift-summary');\n\n        var address = shipping.shippingAddress;\n        var selectedShippingMethod = shipping.selectedShippingMethod;\n        var isGift = shipping.isGift;\n\n        addressHelpers.methods.populateAddressSummary($addressContainer, address);\n\n        if (address && address.phone) {\n            $shippingPhone.text(address.phone);\n        } else {\n            $shippingPhone.empty();\n        }\n\n        if (selectedShippingMethod) {\n            $('body').trigger('shipping:updateAddressLabelText',\n                { selectedShippingMethod: selectedShippingMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n            $shippingSummaryLabel.show();\n            $summaryDetails.show();\n            $methodTitle.text(selectedShippingMethod.displayName);\n            if (selectedShippingMethod.estimatedArrivalTime) {\n                $methodArrivalTime.text(\n                    '( ' + selectedShippingMethod.estimatedArrivalTime + ' )'\n                );\n            } else {\n                $methodArrivalTime.empty();\n            }\n            $methodPrice.text(selectedShippingMethod.shippingCost);\n        }\n\n        if (isGift) {\n            giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);\n            giftMessageSummary.removeClass('d-none');\n        } else {\n            giftMessageSummary.addClass('d-none');\n        }\n    });\n\n    $('body').trigger('shipping:updateShippingSummaryInformation', { shipping: shipping, order: order });\n}\n\n/**\n * Update the read-only portion of the shipment display (per PLI)\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {\n    var $pli = $('input[value=' + productLineItem.UUID + ']');\n    var form = $pli && $pli.length > 0 ? $pli[0].form : null;\n\n    if (!form) return;\n\n    var $viewBlock = $('.view-address-block', form);\n\n    var address = shipping.shippingAddress || {};\n    var selectedMethod = shipping.selectedShippingMethod;\n\n    var nameLine = address.firstName ? address.firstName + ' ' : '';\n    if (address.lastName) nameLine += address.lastName;\n\n    var address1Line = address.address1;\n    var address2Line = address.address2;\n\n    var phoneLine = address.phone;\n\n    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n        ? '(' + selectedMethod.estimatedArrivalTime + ')'\n        : '';\n\n    var tmpl = $('#pli-shipping-summary-template').clone();\n\n    $('.ship-to-name', tmpl).text(nameLine);\n    $('.ship-to-address1', tmpl).text(address1Line);\n    $('.ship-to-address2', tmpl).text(address2Line);\n    $('.ship-to-city', tmpl).text(address.city);\n    if (address.stateCode) {\n        $('.ship-to-st', tmpl).text(address.stateCode);\n    }\n    $('.ship-to-zip', tmpl).text(address.postalCode);\n    $('.ship-to-phone', tmpl).text(phoneLine);\n\n    if (!address2Line) {\n        $('.ship-to-address2', tmpl).hide();\n    }\n\n    if (!phoneLine) {\n        $('.ship-to-phone', tmpl).hide();\n    }\n\n    if (shipping.selectedShippingMethod) {\n        $('.display-name', tmpl).text(methodNameLine);\n        $('.arrival-time', tmpl).text(methodArrivalTime);\n        $('.price', tmpl).text(shippingCost);\n    }\n\n    if (shipping.isGift) {\n        $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        var shipment = $('.gift-message-' + shipping.UUID);\n        $(shipment).val(shipping.giftMessage);\n    } else {\n        $('.gift-summary', tmpl).addClass('d-none');\n    }\n    // checking h5 title shipping to or pickup\n    var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n    $('body').trigger('shipping:updateAddressLabelText',\n        { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n\n    $viewBlock.html(tmpl.html());\n\n    $('body').trigger('shipping:updatePLIShippingSummaryInformation', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        options: options\n    });\n}\n\n/**\n * Update the hidden form values that associate shipping info with product line items\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\n    $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {\n        var form = pli.form;\n        $('[name=shipmentUUID]', form).val(shipping.UUID);\n        $('[name=originalShipmentUUID]', form).val(shipping.UUID);\n\n        $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);\n    });\n\n    $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\n        productLineItem: productLineItem,\n        shipping: shipping\n    });\n}\n\n/**\n * Update the shipping UI for a single shipping info (shipment model)\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order/basket model\n * @param {Object} customer - the customer model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updateShippingInformation(shipping, order, customer, options) {\n    // First copy over shipmentUUIDs from response, to each PLI form\n    order.shipping.forEach(function (aShipping) {\n        aShipping.productLineItems.items.forEach(function (productLineItem) {\n            updateProductLineItemShipmentUUIDs(productLineItem, aShipping);\n        });\n    });\n\n    // Now update shipping information, based on those associations\n    updateShippingMethods(shipping);\n    updateShippingAddressFormValues(shipping);\n    updateShippingSummaryInformation(shipping, order);\n\n    // And update the PLI-based summary information as well\n    shipping.productLineItems.items.forEach(function (productLineItem) {\n        updateShippingAddressSelector(productLineItem, shipping, order, customer);\n        updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);\n    });\n\n    $('body').trigger('shipping:updateShippingInformation', {\n        order: order,\n        shipping: shipping,\n        customer: customer,\n        options: options\n    });\n}\n\n/**\n * Update the checkout state (single vs. multi-ship)\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updateMultiShipInformation(order) {\n    var $checkoutMain = $('#checkout-main');\n    var $checkbox = $('[name=usingMultiShipping]');\n    var $submitShippingBtn = $('button.submit-shipping');\n    $('.shipping-error .alert-danger').remove();\n\n    if (order.usingMultiShipping) {\n        $checkoutMain.addClass('multi-ship');\n        $checkbox.prop('checked', true);\n    } else {\n        $checkoutMain.removeClass('multi-ship');\n        $checkbox.prop('checked', null);\n        $submitShippingBtn.prop('disabled', null);\n    }\n\n    $('body').trigger('shipping:updateMultiShipInformation', { order: order });\n}\n\n/**\n  * Create an alert to display the error message\n  * @param {Object} message - Error message to display\n  */\nfunction createErrorNotification(message) {\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\n    'fade show\" role=\"alert\">' +\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\n    '<span aria-hidden=\"true\">&times;</span>' +\n    '</button>' + message + '</div>';\n\n    $('.shipping-error').append(errorHtml);\n    scrollAnimate($('.shipping-error'));\n}\n\n/**\n * Handle response from the server for valid or invalid form fields.\n * @param {Object} defer - the deferred object which will resolve on success or reject.\n * @param {Object} data - the response data with the invalid form fields or\n *  valid model data.\n */\nfunction shippingFormResponse(defer, data) {\n    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n    var formSelector = isMultiShip\n        ? '.multi-shipping .active form'\n        : '.single-shipping form';\n\n    // highlight fields with errors\n    if (data.error) {\n        if (data.fieldErrors.length) {\n            data.fieldErrors.forEach(function (error) {\n                if (Object.keys(error).length) {\n                    formHelpers.loadFormErrors(formSelector, error);\n                }\n            });\n            defer.reject(data);\n        }\n\n        if (data.serverErrors && data.serverErrors.length) {\n            $.each(data.serverErrors, function (index, element) {\n                createErrorNotification(element);\n            });\n\n            defer.reject(data);\n        }\n\n        if (data.cartError) {\n            window.location.href = data.redirectUrl;\n            defer.reject();\n        }\n    } else {\n        // Populate the Address Summary\n\n        $('body').trigger('checkout:updateCheckoutView', {\n            order: data.order,\n            customer: data.customer\n        });\n        scrollAnimate($('.payment-form'));\n        defer.resolve(data);\n    }\n}\n/**\n * Clear out all the shipping form values and select the new address in the drop down\n * @param {Object} order - the order object\n */\nfunction clearShippingForms(order) {\n    order.shipping.forEach(function (shipping) {\n        $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            $('input[name$=_firstName]', form).val('');\n            $('input[name$=_lastName]', form).val('');\n            $('input[name$=_address1]', form).val('');\n            $('input[name$=_address2]', form).val('');\n            $('input[name$=_city]', form).val('');\n            $('input[name$=_postalCode]', form).val('');\n            $('select[name$=_stateCode],input[name$=_stateCode]', form).val('');\n            $('select[name$=_country]', form).val('');\n\n            $('input[name$=_phone]', form).val('');\n\n            $('input[name$=_isGift]', form).prop('checked', false);\n            $('textarea[name$=_giftMessage]', form).val('');\n            $(form).find('.gift-message').addClass('d-none');\n\n            $(form).attr('data-address-mode', 'new');\n            var addressSelectorDropDown = $('.addressSelector option[value=new]', form);\n            $(addressSelectorDropDown).prop('selected', true);\n        });\n    });\n\n    $('body').trigger('shipping:clearShippingForms', { order: order });\n}\n\n/**\n * Does Ajax call to create a server-side shipment w/ pliUUID & URL\n * @param {string} url - string representation of endpoint URL\n * @param {Object} shipmentData - product line item UUID\n * @returns {Object} - promise value for async call\n */\nfunction createNewShipment(url, shipmentData) {\n    $.spinner().start();\n    return $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: shipmentData\n    });\n}\n\n/**\n * Does Ajax call to select shipping method\n * @param {string} url - string representation of endpoint URL\n * @param {Object} urlParams - url params\n * @param {Object} el - element that triggered this call\n */\nfunction selectShippingMethodAjax(url, urlParams, el) {\n    $.spinner().start();\n    $('body').trigger('checkout:beforeShippingMethodSelected');\n    $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: urlParams\n    })\n        .done(function (data) {\n            if (data.error) {\n                window.location.href = data.redirectUrl;\n            } else {\n                $('body').trigger('checkout:updateCheckoutView',\n                    {\n                        order: data.order,\n                        customer: data.customer,\n                        options: { keepOpen: true },\n                        urlParams: urlParams\n                    }\n                );\n                $('body').trigger('checkout:postUpdateCheckoutView',\n                    {\n                        el: el\n                    }\n                );\n            }\n            $('body').trigger('checkout:shippingMethodSelected', data);\n            $.spinner().stop();\n        })\n        .fail(function () {\n            $.spinner().stop();\n        });\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view\n * @param {jQuery} element - The shipping content\n */\nfunction enterMultishipView(element) {\n    element.find('.btn-enter-multi-ship').removeClass('d-none');\n\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode\n * @param {jQuery} element - The shipping content\n */\nfunction viewMultishipAddress(element) {\n    element.find('.view-address-block').removeClass('d-none');\n    element.find('.btn-edit-multi-ship').removeClass('d-none');\n\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements that allows the user to edit multi ship address information\n * @param {jQuery} element - The shipping content\n */\nfunction editMultiShipAddress(element) {\n    // Show\n    element.find('.shipping-address').removeClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none');\n\n    // Hide\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n\n    $('body').trigger('shipping:editMultiShipAddress', { element: element, form: element.find('.shipping-form') });\n}\n\n/**\n * perform the proper actions once a user has clicked enter address or edit address for a shipment\n * @param {jQuery} element - The shipping content\n * @param {string} mode - the address mode\n */\nfunction editOrEnterMultiShipInfo(element, mode) {\n    var form = $(element).closest('form');\n    var root = $(element).closest('.shipping-content');\n\n    $('body').trigger('shipping:updateDataAddressMode', { form: form, mode: mode });\n\n    editMultiShipAddress(root);\n\n    var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);\n\n    var savedState = {\n        UUID: $('input[name=shipmentUUID]', form).val(),\n        shippingAddress: addressInfo\n    };\n\n    root.data('saved-state', JSON.stringify(savedState));\n}\n\nmodule.exports = {\n    methods: {\n        updateShippingAddressSelector: updateShippingAddressSelector,\n        updateShippingAddressFormValues: updateShippingAddressFormValues,\n        updateShippingMethods: updateShippingMethods,\n        updateShippingSummaryInformation: updateShippingSummaryInformation,\n        updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,\n        updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,\n        updateShippingInformation: updateShippingInformation,\n        updateMultiShipInformation: updateMultiShipInformation,\n        shippingFormResponse: shippingFormResponse,\n        createNewShipment: createNewShipment,\n        selectShippingMethodAjax: selectShippingMethodAjax,\n        updateShippingMethodList: updateShippingMethodList,\n        clearShippingForms: clearShippingForms,\n        editMultiShipAddress: editMultiShipAddress,\n        editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,\n        createErrorNotification: createErrorNotification,\n        viewMultishipAddress: viewMultishipAddress\n    },\n\n    selectShippingMethod: function () {\n        var baseObj = this;\n\n        $('.shipping-method-list').change(function () {\n            var $shippingForm = $(this).parents('form');\n            var methodID = $(':checked', this).val();\n            var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n            var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n            urlParams.shipmentUUID = shipmentUUID;\n            urlParams.methodID = methodID;\n            urlParams.isGift = $shippingForm.find('.gift').prop('checked');\n            urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();\n\n            var url = $(this).data('select-shipping-method-url');\n\n            if (baseObj.methods && baseObj.methods.selectShippingMethodAjax) {\n                baseObj.methods.selectShippingMethodAjax(url, urlParams, $(this));\n            } else {\n                selectShippingMethodAjax(url, urlParams, $(this));\n            }\n        });\n    },\n\n    toggleMultiship: function () {\n        var baseObj = this;\n\n        $('input[name=\"usingMultiShipping\"]').on('change', function () {\n            var url = $('.multi-shipping-checkbox-block form').attr('action');\n            var usingMultiShip = this.checked;\n\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: { usingMultiShip: usingMultiShip },\n                success: function (response) {\n                    if (response.error) {\n                        window.location.href = response.redirectUrl;\n                    } else {\n                        $('body').trigger('checkout:updateCheckoutView', {\n                            order: response.order,\n                            customer: response.customer\n                        });\n\n                        if ($('#checkout-main').data('customer-type') === 'guest') {\n                            if (baseObj.methods && baseObj.methods.clearShippingForms) {\n                                baseObj.methods.clearShippingForms(response.order);\n                            } else {\n                                clearShippingForms(response.order);\n                            }\n                        } else {\n                            response.order.shipping.forEach(function (shipping) {\n                                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n                                    var form = el.form;\n                                    if (!form) return;\n\n                                    $(form).attr('data-address-mode', 'edit');\n                                    var addressSelectorDropDown = $(form).find('.addressSelector option[value=\"ab_' + shipping.matchingAddressId + '\"]');\n                                    $(addressSelectorDropDown).prop('selected', true);\n                                    $('input[name$=_isGift]', form).prop('checked', false);\n                                    $('textarea[name$=_giftMessage]', form).val('');\n                                    $(form).find('.gift-message').addClass('d-none');\n                                });\n                            });\n                        }\n\n                        if (usingMultiShip) {\n                            $('body').trigger('shipping:selectMultiShipping', { data: response });\n                        } else {\n                            $('body').trigger('shipping:selectSingleShipping', { data: response });\n                        }\n                    }\n\n                    $.spinner().stop();\n                },\n                error: function () {\n                    $.spinner().stop();\n                }\n            });\n        });\n    },\n\n    selectSingleShipping: function () {\n        $('body').on('shipping:selectSingleShipping', function () {\n            $('.single-shipping .shipping-address').removeClass('d-none');\n        });\n    },\n\n    selectMultiShipping: function () {\n        var baseObj = this;\n\n        $('body').on('shipping:selectMultiShipping', function (e, data) {\n            $('.multi-shipping .shipping-address').addClass('d-none');\n\n            data.data.order.shipping.forEach(function (shipping) {\n                var element = $('.multi-shipping .card[data-shipment-uuid=\"' + shipping.UUID + '\"]');\n\n                if (shipping.shippingAddress) {\n                    if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                        baseObj.methods.viewMultishipAddress($(element));\n                    } else {\n                        viewMultishipAddress($(element));\n                    }\n                } else {\n                    /* eslint-disable no-lonely-if */\n                    if (baseObj.methods && baseObj.methods.enterMultishipView) {\n                        baseObj.methods.enterMultishipView($(element));\n                    } else {\n                        enterMultishipView($(element));\n                    }\n                    /* eslint-enable no-lonely-if */\n                }\n            });\n        });\n    },\n\n    selectSingleShipAddress: function () {\n        $('.single-shipping .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var element;\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                $('[name$=' + element + ']', form).val(attrs[attr]);\n            });\n            $('[name$=stateCode]', form).trigger('change');\n            if (shipmentUUID === 'new') {\n                $(form).attr('data-address-mode', 'new');\n                $(form).find('.shipping-address-block').removeClass('d-none');\n            } else if (shipmentUUID === originalUUID) {\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                $(form).attr('data-address-mode', 'customer');\n            } else {\n                $(form).attr('data-address-mode', 'edit');\n            }\n        });\n    },\n\n    selectMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.multi-shipping .addressSelector').on('change', function () {\n            var form = $(this).closest('form');\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var pliUUID = $('input[name=productLineItemUUID]', form).val();\n            var createNewShipmentScoped = baseObj.methods && baseObj.methods.createNewShipment ? baseObj.methods.createNewShipment : createNewShipment;\n\n            var element;\n            Object.keys(attrs).forEach(function (attr) {\n                if (attr === 'isGift') {\n                    $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);\n                    $('[name$=' + attr + ']', form).trigger('change');\n                } else {\n                    element = attr === 'countryCode' ? 'country' : attr;\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n\n            if (shipmentUUID === 'new' && pliUUID) {\n                var createShipmentUrl = $(this).attr('data-create-shipment-url');\n                createNewShipmentScoped(createShipmentUrl, { productLineItemUUID: pliUUID })\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'new');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else if (shipmentUUID === originalUUID) {\n                $('select[name$=stateCode]', form).trigger('change');\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                var url = $(form).attr('action');\n                var serializedData = $(form).serialize();\n                createNewShipmentScoped(url, serializedData)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'customer');\n                        var $rootEl = $(form).closest('.shipping-content');\n                        editMultiShipAddress($rootEl);\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else {\n                var updatePLIShipmentUrl = $(form).attr('action');\n                var serializedAddress = $(form).serialize();\n                createNewShipmentScoped(updatePLIShipmentUrl, serializedAddress)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'edit');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            }\n        });\n    },\n\n    updateShippingList: function () {\n        var baseObj = this;\n\n        $('select[name$=\"shippingAddress_addressFields_states_stateCode\"]')\n            .on('change', function (e) {\n                if (baseObj.methods && baseObj.methods.updateShippingMethodList) {\n                    baseObj.methods.updateShippingMethodList($(e.currentTarget.form));\n                } else {\n                    updateShippingMethodList($(e.currentTarget.form));\n                }\n            });\n    },\n\n    updateDataAddressMode: function () {\n        $('body').on('shipping:updateDataAddressMode', function (e, data) {\n            $(data.form).attr('data-address-mode', data.mode);\n        });\n    },\n\n    enterMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-enter-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'new');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'new');\n            }\n        });\n    },\n\n    editMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-edit-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'edit');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'edit');\n            }\n        });\n    },\n\n    saveMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-save-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            // Save address to checkoutAddressBook\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var data = $(form).serialize();\n            var url = $(form).attr('action');\n\n            $rootEl.spinner().start();\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: data\n            })\n                .done(function (response) {\n                    formHelpers.clearPreviousErrors(form);\n                    if (response.error) {\n                        if (response.fieldErrors && response.fieldErrors.length) {\n                            response.fieldErrors.forEach(function (error) {\n                                if (Object.keys(error).length) {\n                                    formHelpers.loadFormErrors(form, error);\n                                }\n                            });\n                        } else if (response.serverErrors && response.serverErrors.length) {\n                            $.each(response.serverErrors, function (index, element) {\n                                createErrorNotification(element);\n                            });\n                        } else if (response.redirectUrl) {\n                            window.location.href = response.redirectUrl;\n                        }\n                    } else {\n                        // Update UI from response\n                        $('body').trigger('checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer\n                            }\n                        );\n\n                        if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                            baseObj.methods.viewMultishipAddress($rootEl);\n                        } else {\n                            viewMultishipAddress($rootEl);\n                        }\n                    }\n\n                    if (response.order && response.order.shippable) {\n                        $('button.submit-shipping').attr('disabled', null);\n                    }\n\n                    $rootEl.spinner().stop();\n                })\n                .fail(function (err) {\n                    if (err.responseJSON.redirectUrl) {\n                        window.location.href = err.responseJSON.redirectUrl;\n                    }\n\n                    $rootEl.spinner().stop();\n                });\n\n            return false;\n        });\n    },\n\n    cancelMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.btn-cancel-multi-ship-address').on('click', function (e) {\n            e.preventDefault();\n\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var restoreState = $rootEl.data('saved-state');\n\n            // Should clear out changes / restore previous state\n            if (restoreState) {\n                var restoreStateObj = JSON.parse(restoreState);\n                var originalStateCode = restoreStateObj.shippingAddress.stateCode;\n                var stateCode = $('[name$=_stateCode]', form).val();\n\n                if (baseObj.methods && baseObj.methods.updateShippingAddressFormValues) {\n                    baseObj.methods.updateShippingAddressFormValues(restoreStateObj);\n                } else {\n                    updateShippingAddressFormValues(restoreStateObj);\n                }\n\n                if (stateCode !== originalStateCode) {\n                    $('[data-action=save]', form).trigger('click');\n                } else {\n                    $(form).attr('data-address-mode', 'edit');\n                    if (baseObj.methods && baseObj.methods.editMultiShipAddress) {\n                        baseObj.methods.editMultiShipAddress($rootEl);\n                    } else {\n                        editMultiShipAddress($rootEl);\n                    }\n                }\n            }\n\n            return false;\n        });\n    },\n\n    isGift: function () {\n        $('.gift').on('change', function (e) {\n            e.preventDefault();\n            var form = $(this).closest('form');\n\n            if (this.checked) {\n                $(form).find('.gift-message').removeClass('d-none');\n            } else {\n                $(form).find('.gift-message').addClass('d-none');\n                $(form).find('.gift-message').val('');\n            }\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar addressHelpers = __webpack_require__(1);\nvar cleave = __webpack_require__(7);\n\n/**\n * updates the billing address selector within billing forms\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateBillingAddressSelector(order, customer) {\n    var shippings = order.shipping;\n\n    var form = $('form[name$=billing]')[0];\n    var $billingAddressSelector = $('.addressSelector', form);\n    var hasSelectedAddress = false;\n\n    if ($billingAddressSelector && $billingAddressSelector.length === 1) {\n        $billingAddressSelector.empty();\n        // Add New Address option\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order,\n            { type: 'billing' }));\n\n        // Separator -\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            order.resources.shippingAddresses, false, order, {\n                // className: 'multi-shipping',\n                type: 'billing'\n            }\n        ));\n\n        shippings.forEach(function (aShipping) {\n            var isSelected = order.billing.matchingAddressId === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            // Shipping Address option\n            $billingAddressSelector.append(\n                addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order,\n                    {\n                        // className: 'multi-shipping',\n                        type: 'billing'\n                    }\n                )\n            );\n        });\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n                order.resources.accountAddresses, false, order));\n            customer.addresses.forEach(function (address) {\n                var isSelected = order.billing.matchingAddressId === address.ID;\n                hasSelectedAddress = hasSelectedAddress || isSelected;\n                // Customer Address option\n                $billingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress({\n                        UUID: 'ab_' + address.ID,\n                        shippingAddress: address\n                    }, isSelected, order, { type: 'billing' })\n                );\n            });\n        }\n    }\n\n    if (hasSelectedAddress\n        || (!order.billing.matchingAddressId && order.billing.billingAddress.address)) {\n        // show\n        $(form).attr('data-address-mode', 'edit');\n    } else {\n        $(form).attr('data-address-mode', 'new');\n    }\n\n    $billingAddressSelector.show();\n}\n\n/**\n * Updates the billing address form values within payment forms without any payment instrument validation\n * @param {Object} order - the order model\n */\nfunction updateBillingAddress(order) {\n    var billing = order.billing;\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\n        .val(billing.billingAddress.address.stateCode);\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\n    $('input[name$=_email]', form).val(order.orderEmail);\n}\n\n/**\n * Validate and update payment instrument form fields\n * @param {Object} order - the order model\n */\nfunction validateAndUpdateBillingPaymentInstrument(order) {\n    var billing = order.billing;\n    if (!billing.payment || !billing.payment.selectedPaymentInstruments\n        || billing.payment.selectedPaymentInstruments.length <= 0) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    var instrument = billing.payment.selectedPaymentInstruments[0];\n    $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\n    $('select[name$=expirationYear]', form).val(instrument.expirationYear);\n    // Force security code and card number clear\n    $('input[name$=securityCode]', form).val('');\n    $('input[name$=cardNumber]').data('cleave').setRawValue('');\n}\n\n/**\n * Updates the billing address form values within payment forms\n * @param {Object} order - the order model\n */\nfunction updateBillingAddressFormValues(order) {\n    module.exports.methods.updateBillingAddress(order);\n    module.exports.methods.validateAndUpdateBillingPaymentInstrument(order);\n}\n\n/**\n * clears the billing address form values\n */\nfunction clearBillingAddressFormValues() {\n    updateBillingAddressFormValues({\n        billing: {\n            billingAddress: {\n                address: {\n                    countryCode: {}\n                }\n            }\n        }\n    });\n}\n\n/**\n * update billing address summary and contact information\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updateBillingAddressSummary(order) {\n    // update billing address summary\n    addressHelpers.methods.populateAddressSummary('.billing .address-summary',\n        order.billing.billingAddress.address);\n\n    // update billing parts of order summary\n    $('.order-summary-email').text(order.orderEmail);\n\n    if (order.billing.billingAddress.address) {\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\n    }\n}\n\n/**\n * Updates the billing information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n * @param {Object} customer - customer model to use as basis of new truth\n * @param {Object} [options] - options\n */\nfunction updateBillingInformation(order, customer) {\n    updateBillingAddressSelector(order, customer);\n\n    // update billing address form\n    updateBillingAddressFormValues(order);\n\n    // update billing address summary and billing parts of order summary\n    updateBillingAddressSummary(order);\n}\n\n/**\n * Updates the payment information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updatePaymentInformation(order) {\n    // update payment details\n    var $paymentSummary = $('.payment-details');\n    var htmlToAppend = '';\n\n    if (order.billing.payment && order.billing.payment.selectedPaymentInstruments\n        && order.billing.payment.selectedPaymentInstruments.length > 0) {\n        htmlToAppend += '<span>' + order.resources.cardType + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].type\n            + '</span><div>'\n            + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber\n            + '</div><div><span>'\n            + order.resources.cardEnding + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].expirationMonth\n            + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear\n            + '</span></div>';\n    }\n\n    $paymentSummary.empty().append(htmlToAppend);\n}\n\n/**\n * clears the credit card form\n */\nfunction clearCreditCardForm() {\n    $('input[name$=\"_cardNumber\"]').data('cleave').setRawValue('');\n    $('select[name$=\"_expirationMonth\"]').val('');\n    $('select[name$=\"_expirationYear\"]').val('');\n    $('input[name$=\"_securityCode\"]').val('');\n}\n\nmodule.exports = {\n    methods: {\n        updateBillingAddressSelector: updateBillingAddressSelector,\n        updateBillingAddressFormValues: updateBillingAddressFormValues,\n        clearBillingAddressFormValues: clearBillingAddressFormValues,\n        updateBillingInformation: updateBillingInformation,\n        updatePaymentInformation: updatePaymentInformation,\n        clearCreditCardForm: clearCreditCardForm,\n        updateBillingAddress: updateBillingAddress,\n        validateAndUpdateBillingPaymentInstrument: validateAndUpdateBillingPaymentInstrument,\n        updateBillingAddressSummary: updateBillingAddressSummary\n    },\n\n    showBillingDetails: function () {\n        $('.btn-show-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');\n        });\n    },\n\n    hideBillingDetails: function () {\n        $('.btn-hide-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');\n        });\n    },\n\n    selectBillingAddress: function () {\n        $('.payment-form .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var optionID = selectedOption[0].value;\n\n            if (optionID === 'new') {\n                // Show Address\n                $(form).attr('data-address-mode', 'new');\n            } else {\n                // Hide Address\n                $(form).attr('data-address-mode', 'shipment');\n            }\n\n            // Copy fields\n            var attrs = selectedOption.data();\n            var element;\n\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                if (element === 'cardNumber') {\n                    $('.cardNumber').data('cleave').setRawValue(attrs[attr]);\n                } else {\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n        });\n    },\n\n    handleCreditCardNumber: function () {\n        cleave.handleCreditCardNumber('.cardNumber', '#cardType');\n    },\n\n    santitizeForm: function () {\n        $('body').on('checkout:serializeBilling', function (e, data) {\n            var serializedForm = cleave.serializeData(data.form);\n\n            data.callback(serializedForm);\n        });\n    },\n\n    selectSavedPaymentInstrument: function () {\n        $(document).on('click', '.saved-payment-instrument', function (e) {\n            e.preventDefault();\n            $('.saved-payment-security-code').val('');\n            $('.saved-payment-instrument').removeClass('selected-payment');\n            $(this).addClass('selected-payment');\n            $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');\n            $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment' +\n                ' .card-image').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment ' +\n                '.security-code-input').removeClass('checkout-hidden');\n        });\n    },\n\n    addNewPaymentInstrument: function () {\n        $('.btn.add-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', true);\n            clearCreditCardForm();\n            $('.credit-card-form').removeClass('checkout-hidden');\n            $('.user-payment-instruments').addClass('checkout-hidden');\n        });\n    },\n\n    cancelNewPayment: function () {\n        $('.cancel-new-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', false);\n            clearCreditCardForm();\n            $('.user-payment-instruments').removeClass('checkout-hidden');\n            $('.credit-card-form').addClass('checkout-hidden');\n        });\n    },\n\n    clearBillingForm: function () {\n        $('body').on('checkout:clearBillingForm', function () {\n            clearBillingAddressFormValues();\n        });\n    },\n\n    paymentTabs: function () {\n        $('.payment-options .nav-item').on('click', function (e) {\n            e.preventDefault();\n            var methodID = $(this).data('method-id');\n            $('.payment-information').data('payment-method-id', methodID);\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar Cleave = __webpack_require__(8).default;\n\nmodule.exports = {\n    handleCreditCardNumber: function (cardFieldSelector, cardTypeSelector) {\n        var cleave = new Cleave(cardFieldSelector, {\n            creditCard: true,\n            onCreditCardTypeChanged: function (type) {\n                var creditCardTypes = {\n                    visa: 'Visa',\n                    mastercard: 'Master Card',\n                    amex: 'Amex',\n                    discover: 'Discover',\n                    unknown: 'Unknown'\n                };\n\n                var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1\n                    ? type\n                    : 'unknown'];\n                $(cardTypeSelector).val(cardType);\n                $('.card-number-wrapper').attr('data-type', type);\n                if (type === 'visa' || type === 'mastercard' || type === 'discover') {\n                    $('#securityCode').attr('maxlength', 3);\n                } else {\n                    $('#securityCode').attr('maxlength', 4);\n                }\n            }\n        });\n\n        $(cardFieldSelector).data('cleave', cleave);\n    },\n\n    serializeData: function (form) {\n        var serializedArray = form.serializeArray();\n\n        serializedArray.forEach(function (item) {\n            if (item.name.indexOf('cardNumber') > -1) {\n                item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\n            }\n        });\n\n        return $.param(serializedArray);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWMuY2h1L3NmcmEvT1NYL3N0b3JlZnJvbnQtcmVmZXJlbmNlLWFyY2hpdGVjdHVyZS9jYXJ0cmlkZ2VzL2FwcF9zdG9yZWZyb250X2Jhc2UvY2FydHJpZGdlL2NsaWVudC9kZWZhdWx0L2pzL2NvbXBvbmVudHMvY2xlYXZlLmpzP2JkNjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLENBQVc7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyRUFBMkU7QUFDM0U7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2xlYXZlID0gcmVxdWlyZSgnY2xlYXZlLmpzJykuZGVmYXVsdDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaGFuZGxlQ3JlZGl0Q2FyZE51bWJlcjogZnVuY3Rpb24gKGNhcmRGaWVsZFNlbGVjdG9yLCBjYXJkVHlwZVNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBjbGVhdmUgPSBuZXcgQ2xlYXZlKGNhcmRGaWVsZFNlbGVjdG9yLCB7XG4gICAgICAgICAgICBjcmVkaXRDYXJkOiB0cnVlLFxuICAgICAgICAgICAgb25DcmVkaXRDYXJkVHlwZUNoYW5nZWQ6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWRpdENhcmRUeXBlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzYTogJ1Zpc2EnLFxuICAgICAgICAgICAgICAgICAgICBtYXN0ZXJjYXJkOiAnTWFzdGVyIENhcmQnLFxuICAgICAgICAgICAgICAgICAgICBhbWV4OiAnQW1leCcsXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvdmVyOiAnRGlzY292ZXInLFxuICAgICAgICAgICAgICAgICAgICB1bmtub3duOiAnVW5rbm93bidcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNhcmRUeXBlID0gY3JlZGl0Q2FyZFR5cGVzW09iamVjdC5rZXlzKGNyZWRpdENhcmRUeXBlcykuaW5kZXhPZih0eXBlKSA+IC0xXG4gICAgICAgICAgICAgICAgICAgID8gdHlwZVxuICAgICAgICAgICAgICAgICAgICA6ICd1bmtub3duJ107XG4gICAgICAgICAgICAgICAgJChjYXJkVHlwZVNlbGVjdG9yKS52YWwoY2FyZFR5cGUpO1xuICAgICAgICAgICAgICAgICQoJy5jYXJkLW51bWJlci13cmFwcGVyJykuYXR0cignZGF0YS10eXBlJywgdHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd2aXNhJyB8fCB0eXBlID09PSAnbWFzdGVyY2FyZCcgfHwgdHlwZSA9PT0gJ2Rpc2NvdmVyJykge1xuICAgICAgICAgICAgICAgICAgICAkKCcjc2VjdXJpdHlDb2RlJykuYXR0cignbWF4bGVuZ3RoJywgMyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI3NlY3VyaXR5Q29kZScpLmF0dHIoJ21heGxlbmd0aCcsIDQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChjYXJkRmllbGRTZWxlY3RvcikuZGF0YSgnY2xlYXZlJywgY2xlYXZlKTtcbiAgICB9LFxuXG4gICAgc2VyaWFsaXplRGF0YTogZnVuY3Rpb24gKGZvcm0pIHtcbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRBcnJheSA9IGZvcm0uc2VyaWFsaXplQXJyYXkoKTtcblxuICAgICAgICBzZXJpYWxpemVkQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgaWYgKGl0ZW0ubmFtZS5pbmRleE9mKCdjYXJkTnVtYmVyJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUgPSAkKCcjY2FyZE51bWJlcicpLmRhdGEoJ2NsZWF2ZScpLmdldFJhd1ZhbHVlKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICQucGFyYW0oc2VyaWFsaXplZEFycmF5KTtcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar NumeralFormatter = function (numeralDecimalMark,\n                                 numeralIntegerScale,\n                                 numeralDecimalScale,\n                                 numeralThousandsGroupStyle,\n                                 numeralPositiveOnly,\n                                 stripLeadingZeroes,\n                                 prefix,\n                                 signBeforePrefix,\n                                 tailPrefix,\n                                 delimiter) {\n    var owner = this;\n\n    owner.numeralDecimalMark = numeralDecimalMark || '.';\n    owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n    owner.numeralPositiveOnly = !!numeralPositiveOnly;\n    owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n    owner.prefix = (prefix || prefix === '') ? prefix : '';\n    owner.signBeforePrefix = !!signBeforePrefix;\n    owner.tailPrefix = !!tailPrefix;\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n};\n\nNumeralFormatter.groupStyle = {\n    thousand: 'thousand',\n    lakh:     'lakh',\n    wan:      'wan',\n    none:     'none'    \n};\n\nNumeralFormatter.prototype = {\n    getRawValue: function (value) {\n        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n    },\n\n    format: function (value) {\n        var owner = this, parts, partSign, partSignAndPrefix, partInteger, partDecimal = '';\n\n        // strip alphabet letters\n        value = value.replace(/[A-Za-z]/g, '')\n            // replace the first decimal mark with reserved placeholder\n            .replace(owner.numeralDecimalMark, 'M')\n\n            // strip non numeric letters except minus and \"M\"\n            // this is to ensure prefix has been stripped\n            .replace(/[^\\dM-]/g, '')\n\n            // replace the leading minus with reserved placeholder\n            .replace(/^\\-/, 'N')\n\n            // strip the other minus sign (if present)\n            .replace(/\\-/g, '')\n\n            // replace the minus sign (if present)\n            .replace('N', owner.numeralPositiveOnly ? '' : '-')\n\n            // replace decimal mark\n            .replace('M', owner.numeralDecimalMark);\n\n        // strip any leading zeros\n        if (owner.stripLeadingZeroes) {\n            value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n        }\n\n        partSign = value.slice(0, 1) === '-' ? '-' : '';\n        if (typeof owner.prefix != 'undefined') {\n            if (owner.signBeforePrefix) {\n                partSignAndPrefix = partSign + owner.prefix;\n            } else {\n                partSignAndPrefix = owner.prefix + partSign;\n            }\n        } else {\n            partSignAndPrefix = partSign;\n        }\n        \n        partInteger = value;\n\n        if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n            parts = value.split(owner.numeralDecimalMark);\n            partInteger = parts[0];\n            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n        }\n\n        if(partSign === '-') {\n            partInteger = partInteger.slice(1);\n        }\n\n        if (owner.numeralIntegerScale > 0) {\n          partInteger = partInteger.slice(0, owner.numeralIntegerScale);\n        }\n\n        switch (owner.numeralThousandsGroupStyle) {\n        case NumeralFormatter.groupStyle.lakh:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        case NumeralFormatter.groupStyle.wan:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        case NumeralFormatter.groupStyle.thousand:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n\n            break;\n        }\n\n        if (owner.tailPrefix) {\n            return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;\n        }\n\n        return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n    }\n};\n\nvar NumeralFormatter_1 = NumeralFormatter;\n\nvar DateFormatter = function (datePattern, dateMin, dateMax) {\n    var owner = this;\n\n    owner.date = [];\n    owner.blocks = [];\n    owner.datePattern = datePattern;\n    owner.dateMin = dateMin\n      .split('-')\n      .reverse()\n      .map(function(x) {\n        return parseInt(x, 10);\n      });\n    if (owner.dateMin.length === 2) owner.dateMin.unshift(0);\n\n    owner.dateMax = dateMax\n      .split('-')\n      .reverse()\n      .map(function(x) {\n        return parseInt(x, 10);\n      });\n    if (owner.dateMax.length === 2) owner.dateMax.unshift(0);\n    \n    owner.initBlocks();\n};\n\nDateFormatter.prototype = {\n    initBlocks: function () {\n        var owner = this;\n        owner.datePattern.forEach(function (value) {\n            if (value === 'Y') {\n                owner.blocks.push(4);\n            } else {\n                owner.blocks.push(2);\n            }\n        });\n    },\n\n    getISOFormatDate: function () {\n        var owner = this,\n            date = owner.date;\n\n        return date[2] ? (\n            date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0])\n        ) : '';\n    },\n\n    getBlocks: function () {\n        return this.blocks;\n    },\n\n    getValidatedDate: function (value) {\n        var owner = this, result = '';\n\n        value = value.replace(/[^\\d]/g, '');\n\n        owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    sub0 = sub.slice(0, 1),\n                    rest = value.slice(length);\n\n                switch (owner.datePattern[index]) {\n                case 'd':\n                    if (sub === '00') {\n                        sub = '01';\n                    } else if (parseInt(sub0, 10) > 3) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > 31) {\n                        sub = '31';\n                    }\n\n                    break;\n\n                case 'm':\n                    if (sub === '00') {\n                        sub = '01';\n                    } else if (parseInt(sub0, 10) > 1) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > 12) {\n                        sub = '12';\n                    }\n\n                    break;\n                }\n\n                result += sub;\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return this.getFixedDateString(result);\n    },\n\n    getFixedDateString: function (value) {\n        var owner = this, datePattern = owner.datePattern, date = [],\n            dayIndex = 0, monthIndex = 0, yearIndex = 0,\n            dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0,\n            day, month, year, fullYearDone = false;\n\n        // mm-dd || dd-mm\n        if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n            monthStartIndex = 2 - dayStartIndex;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n\n            date = this.getFixedDate(day, month, 0);\n        }\n\n        // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n        if (value.length === 8) {\n            datePattern.forEach(function (type, index) {\n                switch (type) {\n                case 'd':\n                    dayIndex = index;\n                    break;\n                case 'm':\n                    monthIndex = index;\n                    break;\n                default:\n                    yearIndex = index;\n                    break;\n                }\n            });\n\n            yearStartIndex = yearIndex * 2;\n            dayStartIndex = (dayIndex <= yearIndex) ? dayIndex * 2 : (dayIndex * 2 + 2);\n            monthStartIndex = (monthIndex <= yearIndex) ? monthIndex * 2 : (monthIndex * 2 + 2);\n\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n\n            date = this.getFixedDate(day, month, year);\n        }\n\n        // mm-yy || yy-mm\n        if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 2;\n            yearStartIndex = 2 - monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;\n\n            date = [0, month, year];\n        }\n\n        // mm-yyyy || yyyy-mm\n        if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 4;\n            yearStartIndex = 2 - 0.5 * monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n\n            date = [0, month, year];\n        }\n\n        date = owner.getRangeFixedDate(date);\n        owner.date = date;\n\n        var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n            switch (current) {\n            case 'd':\n                return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));\n            case 'm':\n                return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));\n            case 'y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');\n            case 'Y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');\n            }\n        }, '');\n\n        return result;\n    },\n\n    getRangeFixedDate: function (date) {\n        var owner = this,\n            datePattern = owner.datePattern,\n            dateMin = owner.dateMin || [],\n            dateMax = owner.dateMax || [];\n\n        if (!date.length || (dateMin.length < 3 && dateMax.length < 3)) return date;\n\n        if (\n          datePattern.find(function(x) {\n            return x.toLowerCase() === 'y';\n          }) &&\n          date[2] === 0\n        ) return date;\n\n        if (dateMax.length && (dateMax[2] < date[2] || (\n          dateMax[2] === date[2] && (dateMax[1] < date[1] || (\n            dateMax[1] === date[1] && dateMax[0] < date[0]\n          ))\n        ))) return dateMax;\n\n        if (dateMin.length && (dateMin[2] > date[2] || (\n          dateMin[2] === date[2] && (dateMin[1] > date[1] || (\n            dateMin[1] === date[1] && dateMin[0] > date[0]\n          ))\n        ))) return dateMin;\n\n        return date;\n    },\n\n    getFixedDate: function (day, month, year) {\n        day = Math.min(day, 31);\n        month = Math.min(month, 12);\n        year = parseInt((year || 0), 10);\n\n        if ((month < 7 && month % 2 === 0) || (month > 8 && month % 2 === 1)) {\n            day = Math.min(day, month === 2 ? (this.isLeapYear(year) ? 29 : 28) : 30);\n        }\n\n        return [day, month, year];\n    },\n\n    isLeapYear: function (year) {\n        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n    },\n\n    addLeadingZero: function (number) {\n        return (number < 10 ? '0' : '') + number;\n    },\n\n    addLeadingZeroForYear: function (number, fullYearMode) {\n        if (fullYearMode) {\n            return (number < 10 ? '000' : (number < 100 ? '00' : (number < 1000 ? '0' : ''))) + number;\n        }\n\n        return (number < 10 ? '0' : '') + number;\n    }\n};\n\nvar DateFormatter_1 = DateFormatter;\n\nvar TimeFormatter = function (timePattern, timeFormat) {\n    var owner = this;\n\n    owner.time = [];\n    owner.blocks = [];\n    owner.timePattern = timePattern;\n    owner.timeFormat = timeFormat;\n    owner.initBlocks();\n};\n\nTimeFormatter.prototype = {\n    initBlocks: function () {\n        var owner = this;\n        owner.timePattern.forEach(function () {\n            owner.blocks.push(2);\n        });\n    },\n\n    getISOFormatTime: function () {\n        var owner = this,\n            time = owner.time;\n\n        return time[2] ? (\n            owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2])\n        ) : '';\n    },\n\n    getBlocks: function () {\n        return this.blocks;\n    },\n\n    getTimeFormatOptions: function () {\n        var owner = this;\n        if (String(owner.timeFormat) === '12') {\n            return {\n                maxHourFirstDigit: 1,\n                maxHours: 12,\n                maxMinutesFirstDigit: 5,\n                maxMinutes: 60\n            };\n        }\n\n        return {\n            maxHourFirstDigit: 2,\n            maxHours: 23,\n            maxMinutesFirstDigit: 5,\n            maxMinutes: 60\n        };\n    },\n\n    getValidatedTime: function (value) {\n        var owner = this, result = '';\n\n        value = value.replace(/[^\\d]/g, '');\n\n        var timeFormatOptions = owner.getTimeFormatOptions();\n\n        owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    sub0 = sub.slice(0, 1),\n                    rest = value.slice(length);\n\n                switch (owner.timePattern[index]) {\n\n                case 'h':\n                    if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {\n                        sub = timeFormatOptions.maxHours + '';\n                    }\n\n                    break;\n\n                case 'm':\n                case 's':\n                    if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {\n                        sub = timeFormatOptions.maxMinutes + '';\n                    }\n                    break;\n                }\n\n                result += sub;\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return this.getFixedTimeString(result);\n    },\n\n    getFixedTimeString: function (value) {\n        var owner = this, timePattern = owner.timePattern, time = [],\n            secondIndex = 0, minuteIndex = 0, hourIndex = 0,\n            secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0,\n            second, minute, hour;\n\n        if (value.length === 6) {\n            timePattern.forEach(function (type, index) {\n                switch (type) {\n                case 's':\n                    secondIndex = index * 2;\n                    break;\n                case 'm':\n                    minuteIndex = index * 2;\n                    break;\n                case 'h':\n                    hourIndex = index * 2;\n                    break;\n                }\n            });\n\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            secondStartIndex = secondIndex;\n\n            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n            time = this.getFixedTime(hour, minute, second);\n        }\n\n        if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n            timePattern.forEach(function (type, index) {\n                switch (type) {\n                case 'm':\n                    minuteIndex = index * 2;\n                    break;\n                case 'h':\n                    hourIndex = index * 2;\n                    break;\n                }\n            });\n\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n\n            second = 0;\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n            time = this.getFixedTime(hour, minute, second);\n        }\n\n        owner.time = time;\n\n        return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n            switch (current) {\n            case 's':\n                return previous + owner.addLeadingZero(time[2]);\n            case 'm':\n                return previous + owner.addLeadingZero(time[1]);\n            case 'h':\n                return previous + owner.addLeadingZero(time[0]);\n            }\n        }, '');\n    },\n\n    getFixedTime: function (hour, minute, second) {\n        second = Math.min(parseInt(second || 0, 10), 60);\n        minute = Math.min(minute, 60);\n        hour = Math.min(hour, 60);\n\n        return [hour, minute, second];\n    },\n\n    addLeadingZero: function (number) {\n        return (number < 10 ? '0' : '') + number;\n    }\n};\n\nvar TimeFormatter_1 = TimeFormatter;\n\nvar PhoneFormatter = function (formatter, delimiter) {\n    var owner = this;\n\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n\n    owner.formatter = formatter;\n};\n\nPhoneFormatter.prototype = {\n    setFormatter: function (formatter) {\n        this.formatter = formatter;\n    },\n\n    format: function (phoneNumber) {\n        var owner = this;\n\n        owner.formatter.clear();\n\n        // only keep number and +\n        phoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\n\n        // strip non-leading +\n        phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+');\n\n        // strip delimiter\n        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n\n        var result = '', current, validated = false;\n\n        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n            current = owner.formatter.inputDigit(phoneNumber.charAt(i));\n\n            // has ()- or space inside\n            if (/[\\s()-]/g.test(current)) {\n                result = current;\n\n                validated = true;\n            } else {\n                if (!validated) {\n                    result = current;\n                }\n                // else: over length input\n                // it turns to invalid number again\n            }\n        }\n\n        // strip ()\n        // e.g. US: 7161234567 returns (716) 123-4567\n        result = result.replace(/[()]/g, '');\n        // replace library delimiter with user customized delimiter\n        result = result.replace(/[\\s-]/g, owner.delimiter);\n\n        return result;\n    }\n};\n\nvar PhoneFormatter_1 = PhoneFormatter;\n\nvar CreditCardDetector = {\n    blocks: {\n        uatp:          [4, 5, 6],\n        amex:          [4, 6, 5],\n        diners:        [4, 6, 4],\n        discover:      [4, 4, 4, 4],\n        mastercard:    [4, 4, 4, 4],\n        dankort:       [4, 4, 4, 4],\n        instapayment:  [4, 4, 4, 4],\n        jcb15:         [4, 6, 5],\n        jcb:           [4, 4, 4, 4],\n        maestro:       [4, 4, 4, 4],\n        visa:          [4, 4, 4, 4],\n        mir:           [4, 4, 4, 4],\n        unionPay:      [4, 4, 4, 4],\n        general:       [4, 4, 4, 4]\n    },\n\n    re: {\n        // starts with 1; 15 digits, not starts with 1800 (jcb card)\n        uatp: /^(?!1800)1\\d{0,14}/,\n\n        // starts with 34/37; 15 digits\n        amex: /^3[47]\\d{0,13}/,\n\n        // starts with 6011/65/644-649; 16 digits\n        discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n\n        // starts with 300-305/309 or 36/38/39; 14 digits\n        diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n\n        // starts with 51-55/2221–2720; 16 digits\n        mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n\n        // starts with 5019/4175/4571; 16 digits\n        dankort: /^(5019|4175|4571)\\d{0,12}/,\n\n        // starts with 637-639; 16 digits\n        instapayment: /^63[7-9]\\d{0,13}/,\n\n        // starts with 2131/1800; 15 digits\n        jcb15: /^(?:2131|1800)\\d{0,11}/,\n\n        // starts with 2131/1800/35; 16 digits\n        jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n\n        // starts with 50/56-58/6304/67; 16 digits\n        maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n\n        // starts with 22; 16 digits\n        mir: /^220[0-4]\\d{0,12}/,\n\n        // starts with 4; 16 digits\n        visa: /^4\\d{0,15}/,\n\n        // starts with 62/81; 16 digits\n        unionPay: /^(62|81)\\d{0,14}/\n    },\n\n    getStrictBlocks: function (block) {\n      var total = block.reduce(function (prev, current) {\n        return prev + current;\n      }, 0);\n\n      return block.concat(19 - total);\n    },\n\n    getInfo: function (value, strictMode) {\n        var blocks = CreditCardDetector.blocks,\n            re = CreditCardDetector.re;\n\n        // Some credit card can have up to 19 digits number.\n        // Set strictMode to true will remove the 16 max-length restrain,\n        // however, I never found any website validate card number like\n        // this, hence probably you don't want to enable this option.\n        strictMode = !!strictMode;\n\n        for (var key in re) {\n            if (re[key].test(value)) {\n                var matchedBlocks = blocks[key];\n                return {\n                    type: key,\n                    blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks\n                };\n            }\n        }\n\n        return {\n            type: 'unknown',\n            blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general\n        };\n    }\n};\n\nvar CreditCardDetector_1 = CreditCardDetector;\n\nvar Util = {\n    noop: function () {\n    },\n\n    strip: function (value, re) {\n        return value.replace(re, '');\n    },\n\n    getPostDelimiter: function (value, delimiter, delimiters) {\n        // single delimiter\n        if (delimiters.length === 0) {\n            return value.slice(-delimiter.length) === delimiter ? delimiter : '';\n        }\n\n        // multiple delimiters\n        var matchedDelimiter = '';\n        delimiters.forEach(function (current) {\n            if (value.slice(-current.length) === current) {\n                matchedDelimiter = current;\n            }\n        });\n\n        return matchedDelimiter;\n    },\n\n    getDelimiterREByDelimiter: function (delimiter) {\n        return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n    },\n\n    getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n      // If cursor was at the end of value, just place it back.\n      // Because new value could contain additional chars.\n      if (oldValue.length === prevPos) {\n          return newValue.length;\n      }\n\n      return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter ,delimiters);\n    },\n\n    getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n        var oldRawValue, newRawValue, lengthOffset;\n\n        oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n        newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n        lengthOffset = oldRawValue.length - newRawValue.length;\n\n        return (lengthOffset !== 0) ? (lengthOffset / Math.abs(lengthOffset)) : 0;\n    },\n\n    stripDelimiters: function (value, delimiter, delimiters) {\n        var owner = this;\n\n        // single delimiter\n        if (delimiters.length === 0) {\n            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n\n            return value.replace(delimiterRE, '');\n        }\n\n        // multiple delimiters\n        delimiters.forEach(function (current) {\n            current.split('').forEach(function (letter) {\n                value = value.replace(owner.getDelimiterREByDelimiter(letter), '');\n            });\n        });\n\n        return value;\n    },\n\n    headStr: function (str, length) {\n        return str.slice(0, length);\n    },\n\n    getMaxLength: function (blocks) {\n        return blocks.reduce(function (previous, current) {\n            return previous + current;\n        }, 0);\n    },\n\n    // strip prefix\n    // Before type  |   After type    |     Return value\n    // PEFIX-...    |   PEFIX-...     |     ''\n    // PREFIX-123   |   PEFIX-123     |     123\n    // PREFIX-123   |   PREFIX-23     |     23\n    // PREFIX-123   |   PREFIX-1234   |     1234\n    getPrefixStrippedValue: function (value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {\n        // No prefix\n        if (prefixLength === 0) {\n          return value;\n        }\n\n        // Value is prefix\n        if (value === prefix && value !== '') {\n          return '';\n        }\n\n        if (signBeforePrefix && (value.slice(0, 1) == '-')) {\n            var prev = (prevResult.slice(0, 1) == '-') ? prevResult.slice(1) : prevResult;\n            return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);\n        }\n\n        // Pre result prefix string does not match pre-defined prefix\n        if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n        } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n        }\n\n        var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);\n\n        // New value has issue, someone typed in between prefix letters\n        // Revert to pre value\n        if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            return prevValue.slice(prefixLength);\n        } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {\n            return prevValue.slice(0, -prefixLength - 1);\n        }\n\n        // No issue, strip prefix for new value\n        return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);\n    },\n\n    getFirstDiffIndex: function (prev, current) {\n        var index = 0;\n\n        while (prev.charAt(index) === current.charAt(index)) {\n            if (prev.charAt(index++) === '') {\n                return -1;\n            }\n        }\n\n        return index;\n    },\n\n    getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n        var result = '',\n            multipleDelimiters = delimiters.length > 0,\n            currentDelimiter = '';\n\n        // no options, normal input\n        if (blocksLength === 0) {\n            return value;\n        }\n\n        blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    rest = value.slice(length);\n\n                if (multipleDelimiters) {\n                    currentDelimiter = delimiters[delimiterLazyShow ? (index - 1) : index] || currentDelimiter;\n                } else {\n                    currentDelimiter = delimiter;\n                }\n\n                if (delimiterLazyShow) {\n                    if (index > 0) {\n                        result += currentDelimiter;\n                    }\n\n                    result += sub;\n                } else {\n                    result += sub;\n\n                    if (sub.length === length && index < blocksLength - 1) {\n                        result += currentDelimiter;\n                    }\n                }\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return result;\n    },\n\n    // move cursor to the end\n    // the first time user focuses on an input with prefix\n    fixPrefixCursor: function (el, prefix, delimiter, delimiters) {\n        if (!el) {\n            return;\n        }\n\n        var val = el.value,\n            appendix = delimiter || (delimiters[0] || ' ');\n\n        if (!el.setSelectionRange || !prefix || (prefix.length + appendix.length) <= val.length) {\n            return;\n        }\n\n        var len = val.length * 2;\n\n        // set timeout to avoid blink\n        setTimeout(function () {\n            el.setSelectionRange(len, len);\n        }, 1);\n    },\n\n    // Check if input field is fully selected\n    checkFullSelection: function(value) {\n      try {\n        var selection = window.getSelection() || document.getSelection() || {};\n        return selection.toString().length === value.length;\n      } catch (ex) {\n        // Ignore\n      }\n\n      return false;\n    },\n\n    setSelection: function (element, position, doc) {\n        if (element !== this.getActiveElement(doc)) {\n            return;\n        }\n\n        // cursor is already in the end\n        if (element && element.value.length <= position) {\n          return;\n        }\n\n        if (element.createTextRange) {\n            var range = element.createTextRange();\n\n            range.move('character', position);\n            range.select();\n        } else {\n            try {\n                element.setSelectionRange(position, position);\n            } catch (e) {\n                // eslint-disable-next-line\n                console.warn('The input element type does not support selection');\n            }\n        }\n    },\n\n    getActiveElement: function(parent) {\n        var activeElement = parent.activeElement;\n        if (activeElement && activeElement.shadowRoot) {\n            return this.getActiveElement(activeElement.shadowRoot);\n        }\n        return activeElement;\n    },\n\n    isAndroid: function () {\n        return navigator && /android/i.test(navigator.userAgent);\n    },\n\n    // On Android chrome, the keyup and keydown events\n    // always return key code 229 as a composition that\n    // buffers the user’s keystrokes\n    // see https://github.com/nosir/cleave.js/issues/147\n    isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {\n        if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n            return false;\n        }\n\n        return currentInputValue === lastInputValue.slice(0, -1);\n    }\n};\n\nvar Util_1 = Util;\n\n/**\n * Props Assignment\n *\n * Separate this, so react module can share the usage\n */\nvar DefaultProperties = {\n    // Maybe change to object-assign\n    // for now just keep it as simple\n    assign: function (target, opts) {\n        target = target || {};\n        opts = opts || {};\n\n        // credit card\n        target.creditCard = !!opts.creditCard;\n        target.creditCardStrictMode = !!opts.creditCardStrictMode;\n        target.creditCardType = '';\n        target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || (function () {});\n\n        // phone\n        target.phone = !!opts.phone;\n        target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n        target.phoneFormatter = {};\n\n        // time\n        target.time = !!opts.time;\n        target.timePattern = opts.timePattern || ['h', 'm', 's'];\n        target.timeFormat = opts.timeFormat || '24';\n        target.timeFormatter = {};\n\n        // date\n        target.date = !!opts.date;\n        target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n        target.dateMin = opts.dateMin || '';\n        target.dateMax = opts.dateMax || '';\n        target.dateFormatter = {};\n\n        // numeral\n        target.numeral = !!opts.numeral;\n        target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n        target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n        target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n        target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n        target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n        target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n        target.signBeforePrefix = !!opts.signBeforePrefix;\n        target.tailPrefix = !!opts.tailPrefix;\n\n        // others\n        target.swapHiddenInput = !!opts.swapHiddenInput;\n        \n        target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n\n        target.uppercase = !!opts.uppercase;\n        target.lowercase = !!opts.lowercase;\n\n        target.prefix = (target.creditCard || target.date) ? '' : (opts.prefix || '');\n        target.noImmediatePrefix = !!opts.noImmediatePrefix;\n        target.prefixLength = target.prefix.length;\n        target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n        target.copyDelimiter = !!opts.copyDelimiter;\n\n        target.initValue = (opts.initValue !== undefined && opts.initValue !== null) ? opts.initValue.toString() : '';\n\n        target.delimiter =\n            (opts.delimiter || opts.delimiter === '') ? opts.delimiter :\n                (opts.date ? '/' :\n                    (opts.time ? ':' :\n                        (opts.numeral ? ',' :\n                            (opts.phone ? ' ' :\n                                ' '))));\n        target.delimiterLength = target.delimiter.length;\n        target.delimiterLazyShow = !!opts.delimiterLazyShow;\n        target.delimiters = opts.delimiters || [];\n\n        target.blocks = opts.blocks || [];\n        target.blocksLength = target.blocks.length;\n\n        target.root = (typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window;\n        target.document = opts.document || target.root.document;\n\n        target.maxLength = 0;\n\n        target.backspace = false;\n        target.result = '';\n\n        target.onValueChanged = opts.onValueChanged || (function () {});\n\n        return target;\n    }\n};\n\nvar DefaultProperties_1 = DefaultProperties;\n\n/**\n * Construct a new Cleave instance by passing the configuration object\n *\n * @param {String | HTMLElement} element\n * @param {Object} opts\n */\nvar Cleave = function (element, opts) {\n    var owner = this;\n    var hasMultipleElements = false;\n\n    if (typeof element === 'string') {\n        owner.element = document.querySelector(element);\n        hasMultipleElements = document.querySelectorAll(element).length > 1;\n    } else {\n      if (typeof element.length !== 'undefined' && element.length > 0) {\n        owner.element = element[0];\n        hasMultipleElements = element.length > 1;\n      } else {\n        owner.element = element;\n      }\n    }\n\n    if (!owner.element) {\n        throw new Error('[cleave.js] Please check the element');\n    }\n\n    if (hasMultipleElements) {\n      try {\n        // eslint-disable-next-line\n        console.warn('[cleave.js] Multiple input fields matched, cleave.js will only take the first one.');\n      } catch (e) {\n        // Old IE\n      }\n    }\n\n    opts.initValue = owner.element.value;\n\n    owner.properties = Cleave.DefaultProperties.assign({}, opts);\n\n    owner.init();\n};\n\nCleave.prototype = {\n    init: function () {\n        var owner = this, pps = owner.properties;\n\n        // no need to use this lib\n        if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {\n            owner.onInput(pps.initValue);\n\n            return;\n        }\n\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n\n        owner.isAndroid = Cleave.Util.isAndroid();\n        owner.lastInputValue = '';\n        owner.isBackward = '';\n\n        owner.onChangeListener = owner.onChange.bind(owner);\n        owner.onKeyDownListener = owner.onKeyDown.bind(owner);\n        owner.onFocusListener = owner.onFocus.bind(owner);\n        owner.onCutListener = owner.onCut.bind(owner);\n        owner.onCopyListener = owner.onCopy.bind(owner);\n\n        owner.initSwapHiddenInput();\n\n        owner.element.addEventListener('input', owner.onChangeListener);\n        owner.element.addEventListener('keydown', owner.onKeyDownListener);\n        owner.element.addEventListener('focus', owner.onFocusListener);\n        owner.element.addEventListener('cut', owner.onCutListener);\n        owner.element.addEventListener('copy', owner.onCopyListener);\n\n\n        owner.initPhoneFormatter();\n        owner.initDateFormatter();\n        owner.initTimeFormatter();\n        owner.initNumeralFormatter();\n\n        // avoid touch input field if value is null\n        // otherwise Firefox will add red box-shadow for <input required />\n        if (pps.initValue || (pps.prefix && !pps.noImmediatePrefix)) {\n            owner.onInput(pps.initValue);\n        }\n    },\n\n    initSwapHiddenInput: function () {\n        var owner = this, pps = owner.properties;\n        if (!pps.swapHiddenInput) return;\n\n        var inputFormatter = owner.element.cloneNode(true);\n        owner.element.parentNode.insertBefore(inputFormatter, owner.element);\n\n        owner.elementSwapHidden = owner.element;\n        owner.elementSwapHidden.type = 'hidden';\n\n        owner.element = inputFormatter;\n        owner.element.id = '';\n    },\n\n    initNumeralFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.numeral) {\n            return;\n        }\n\n        pps.numeralFormatter = new Cleave.NumeralFormatter(\n            pps.numeralDecimalMark,\n            pps.numeralIntegerScale,\n            pps.numeralDecimalScale,\n            pps.numeralThousandsGroupStyle,\n            pps.numeralPositiveOnly,\n            pps.stripLeadingZeroes,\n            pps.prefix,\n            pps.signBeforePrefix,\n            pps.tailPrefix,\n            pps.delimiter\n        );\n    },\n\n    initTimeFormatter: function() {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.time) {\n            return;\n        }\n\n        pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);\n        pps.blocks = pps.timeFormatter.getBlocks();\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n    },\n\n    initDateFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.date) {\n            return;\n        }\n\n        pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);\n        pps.blocks = pps.dateFormatter.getBlocks();\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n    },\n\n    initPhoneFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.phone) {\n            return;\n        }\n\n        // Cleave.AsYouTypeFormatter should be provided by\n        // external google closure lib\n        try {\n            pps.phoneFormatter = new Cleave.PhoneFormatter(\n                new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),\n                pps.delimiter\n            );\n        } catch (ex) {\n            throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');\n        }\n    },\n\n    onKeyDown: function (event) {\n        var owner = this,\n            charCode = event.which || event.keyCode;\n\n        owner.lastInputValue = owner.element.value;\n        owner.isBackward = charCode === 8;\n    },\n\n    onChange: function (event) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util;\n\n        owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward';\n\n        var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);\n\n        if (owner.isBackward && postDelimiter) {\n            pps.postDelimiterBackspace = postDelimiter;\n        } else {\n            pps.postDelimiterBackspace = false;\n        }\n\n        this.onInput(this.element.value);\n    },\n\n    onFocus: function () {\n        var owner = this,\n            pps = owner.properties;\n        owner.lastInputValue = owner.element.value;\n\n        if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {\n            this.onInput(pps.prefix);\n        }\n\n        Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n    },\n\n    onCut: function (e) {\n        if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n        this.copyClipboardData(e);\n        this.onInput('');\n    },\n\n    onCopy: function (e) {\n        if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n        this.copyClipboardData(e);\n    },\n\n    copyClipboardData: function (e) {\n        var owner = this,\n            pps = owner.properties,\n            Util = Cleave.Util,\n            inputValue = owner.element.value,\n            textToCopy = '';\n\n        if (!pps.copyDelimiter) {\n            textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);\n        } else {\n            textToCopy = inputValue;\n        }\n\n        try {\n            if (e.clipboardData) {\n                e.clipboardData.setData('Text', textToCopy);\n            } else {\n                window.clipboardData.setData('Text', textToCopy);\n            }\n\n            e.preventDefault();\n        } catch (ex) {\n            //  empty\n        }\n    },\n\n    onInput: function (value) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util;\n\n        // case 1: delete one more character \"4\"\n        // 1234*| -> hit backspace -> 123|\n        // case 2: last character is not delimiter which is:\n        // 12|34* -> hit backspace -> 1|34*\n        // note: no need to apply this for numeral mode\n        var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);\n        if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {\n            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);\n        }\n\n        // phone formatter\n        if (pps.phone) {\n            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n                pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n            } else {\n                pps.result = pps.phoneFormatter.format(value);\n            }\n            owner.updateValueState();\n\n            return;\n        }\n\n        // numeral formatter\n        if (pps.numeral) {\n            // Do not show prefix when noImmediatePrefix is specified\n            // This mostly because we need to show user the native input placeholder\n            if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {\n                pps.result = '';\n            } else {\n                pps.result = pps.numeralFormatter.format(value);\n            }\n            owner.updateValueState();\n\n            return;\n        }\n\n        // date\n        if (pps.date) {\n            value = pps.dateFormatter.getValidatedDate(value);\n        }\n\n        // time\n        if (pps.time) {\n            value = pps.timeFormatter.getValidatedTime(value);\n        }\n\n        // strip delimiters\n        value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);\n\n        // strip prefix\n        value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n\n        // strip non-numeric characters\n        value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value;\n\n        // convert case\n        value = pps.uppercase ? value.toUpperCase() : value;\n        value = pps.lowercase ? value.toLowerCase() : value;\n\n        // prevent from showing prefix when no immediate option enabled with empty input value\n        if (pps.prefix) {\n            if (pps.tailPrefix) {\n                value = value + pps.prefix;\n            } else {\n                value = pps.prefix + value;\n            }\n\n\n            // no blocks specified, no need to do formatting\n            if (pps.blocksLength === 0) {\n                pps.result = value;\n                owner.updateValueState();\n\n                return;\n            }\n        }\n\n        // update credit card props\n        if (pps.creditCard) {\n            owner.updateCreditCardPropsByValue(value);\n        }\n\n        // strip over length characters\n        value = Util.headStr(value, pps.maxLength);\n\n        // apply blocks\n        pps.result = Util.getFormattedValue(\n            value,\n            pps.blocks, pps.blocksLength,\n            pps.delimiter, pps.delimiters, pps.delimiterLazyShow\n        );\n\n        owner.updateValueState();\n    },\n\n    updateCreditCardPropsByValue: function (value) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util,\n            creditCardInfo;\n\n        // At least one of the first 4 characters has changed\n        if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n            return;\n        }\n\n        creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n\n        pps.blocks = creditCardInfo.blocks;\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Util.getMaxLength(pps.blocks);\n\n        // credit card type changed\n        if (pps.creditCardType !== creditCardInfo.type) {\n            pps.creditCardType = creditCardInfo.type;\n\n            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n        }\n    },\n\n    updateValueState: function () {\n        var owner = this,\n            Util = Cleave.Util,\n            pps = owner.properties;\n\n        if (!owner.element) {\n            return;\n        }\n\n        var endPos = owner.element.selectionEnd;\n        var oldValue = owner.element.value;\n        var newValue = pps.result;\n\n        endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);\n\n        // fix Android browser type=\"text\" input field\n        // cursor not jumping issue\n        if (owner.isAndroid) {\n            window.setTimeout(function () {\n                owner.element.value = newValue;\n                Util.setSelection(owner.element, endPos, pps.document, false);\n                owner.callOnValueChanged();\n            }, 1);\n\n            return;\n        }\n\n        owner.element.value = newValue;\n        if (pps.swapHiddenInput) owner.elementSwapHidden.value = owner.getRawValue();\n\n        Util.setSelection(owner.element, endPos, pps.document, false);\n        owner.callOnValueChanged();\n    },\n\n    callOnValueChanged: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        pps.onValueChanged.call(owner, {\n            target: {\n                name: owner.element.name,\n                value: pps.result,\n                rawValue: owner.getRawValue()\n            }\n        });\n    },\n\n    setPhoneRegionCode: function (phoneRegionCode) {\n        var owner = this, pps = owner.properties;\n\n        pps.phoneRegionCode = phoneRegionCode;\n        owner.initPhoneFormatter();\n        owner.onChange();\n    },\n\n    setRawValue: function (value) {\n        var owner = this, pps = owner.properties;\n\n        value = value !== undefined && value !== null ? value.toString() : '';\n\n        if (pps.numeral) {\n            value = value.replace('.', pps.numeralDecimalMark);\n        }\n\n        pps.postDelimiterBackspace = false;\n\n        owner.element.value = value;\n        owner.onInput(value);\n    },\n\n    getRawValue: function () {\n        var owner = this,\n            pps = owner.properties,\n            Util = Cleave.Util,\n            rawValue = owner.element.value;\n\n        if (pps.rawValueTrimPrefix) {\n            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n        }\n\n        if (pps.numeral) {\n            rawValue = pps.numeralFormatter.getRawValue(rawValue);\n        } else {\n            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n        }\n\n        return rawValue;\n    },\n\n    getISOFormatDate: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n    },\n\n    getISOFormatTime: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        return pps.time ? pps.timeFormatter.getISOFormatTime() : '';\n    },\n\n    getFormattedValue: function () {\n        return this.element.value;\n    },\n\n    destroy: function () {\n        var owner = this;\n\n        owner.element.removeEventListener('input', owner.onChangeListener);\n        owner.element.removeEventListener('keydown', owner.onKeyDownListener);\n        owner.element.removeEventListener('focus', owner.onFocusListener);\n        owner.element.removeEventListener('cut', owner.onCutListener);\n        owner.element.removeEventListener('copy', owner.onCopyListener);\n    },\n\n    toString: function () {\n        return '[Cleave Object]';\n    }\n};\n\nCleave.NumeralFormatter = NumeralFormatter_1;\nCleave.DateFormatter = DateFormatter_1;\nCleave.TimeFormatter = TimeFormatter_1;\nCleave.PhoneFormatter = PhoneFormatter_1;\nCleave.CreditCardDetector = CreditCardDetector_1;\nCleave.Util = Util_1;\nCleave.DefaultProperties = DefaultProperties_1;\n\n// for angular directive\n((typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window)['Cleave'] = Cleave;\n\n// CommonJS\nvar Cleave_1 = Cleave;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Cleave_1);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWMuY2h1L3NmcmEvT1NYL3N0b3JlZnJvbnQtcmVmZXJlbmNlLWFyY2hpdGVjdHVyZS9ub2RlX21vZHVsZXMvY2xlYXZlLmpzL2Rpc3QvY2xlYXZlLWVzbS5qcz8xODdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDBEQUEwRCxFQUFFOztBQUU1RDs7QUFFQTtBQUNBLDBEQUEwRCxFQUFFOztBQUU1RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxrREFBa0QsVUFBVTtBQUM1RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EseUJBQXlCO0FBQ3pCLDRCQUE0QixLQUFLOztBQUVqQyw2QkFBNkI7QUFDN0Isd0JBQXdCLEtBQUs7O0FBRTdCLHVDQUF1QztBQUN2QyxpQ0FBaUMsSUFBSSxlQUFlLEtBQUs7O0FBRXpELCtDQUErQztBQUMvQyw2Q0FBNkMsS0FBSzs7QUFFbEQsdUNBQXVDO0FBQ3ZDLGdDQUFnQyxJQUFJLFdBQVcsSUFBSSxVQUFVLElBQUksSUFBSSxLQUFLOztBQUUxRSxzQ0FBc0M7QUFDdEMsc0NBQXNDLEtBQUs7O0FBRTNDLCtCQUErQjtBQUMvQixrQ0FBa0MsS0FBSzs7QUFFdkMsaUNBQWlDO0FBQ2pDLGlDQUFpQyxLQUFLOztBQUV0QyxvQ0FBb0M7QUFDcEMsdUJBQXVCLElBQUksSUFBSSxLQUFLOztBQUVwQyx3Q0FBd0M7QUFDeEMsZ0NBQWdDLElBQUksV0FBVyxJQUFJLElBQUksS0FBSzs7QUFFNUQsMEJBQTBCO0FBQzFCLDBCQUEwQixLQUFLOztBQUUvQix5QkFBeUI7QUFDekIsb0JBQW9CLEtBQUs7O0FBRXpCLDZCQUE2QjtBQUM3Qiw4QkFBOEIsS0FBSztBQUNuQyxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhEQUE4RDtBQUM5RCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3Rjs7QUFFeEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsc0VBQXNFOztBQUV0RTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseURBQXlEOztBQUV6RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw4RUFBOEUsUUFBUTtBQUN0RjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVlLHVFQUFRLEVBQUMiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBOdW1lcmFsRm9ybWF0dGVyID0gZnVuY3Rpb24gKG51bWVyYWxEZWNpbWFsTWFyayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsRGVjaW1hbFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBMZWFkaW5nWmVyb2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhaWxQcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXIpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIubnVtZXJhbERlY2ltYWxNYXJrID0gbnVtZXJhbERlY2ltYWxNYXJrIHx8ICcuJztcbiAgICBvd25lci5udW1lcmFsSW50ZWdlclNjYWxlID0gbnVtZXJhbEludGVnZXJTY2FsZSA+IDAgPyBudW1lcmFsSW50ZWdlclNjYWxlIDogMDtcbiAgICBvd25lci5udW1lcmFsRGVjaW1hbFNjYWxlID0gbnVtZXJhbERlY2ltYWxTY2FsZSA+PSAwID8gbnVtZXJhbERlY2ltYWxTY2FsZSA6IDI7XG4gICAgb3duZXIubnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUgPSBudW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSB8fCBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUudGhvdXNhbmQ7XG4gICAgb3duZXIubnVtZXJhbFBvc2l0aXZlT25seSA9ICEhbnVtZXJhbFBvc2l0aXZlT25seTtcbiAgICBvd25lci5zdHJpcExlYWRpbmdaZXJvZXMgPSBzdHJpcExlYWRpbmdaZXJvZXMgIT09IGZhbHNlO1xuICAgIG93bmVyLnByZWZpeCA9IChwcmVmaXggfHwgcHJlZml4ID09PSAnJykgPyBwcmVmaXggOiAnJztcbiAgICBvd25lci5zaWduQmVmb3JlUHJlZml4ID0gISFzaWduQmVmb3JlUHJlZml4O1xuICAgIG93bmVyLnRhaWxQcmVmaXggPSAhIXRhaWxQcmVmaXg7XG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcsJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG59O1xuXG5OdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUgPSB7XG4gICAgdGhvdXNhbmQ6ICd0aG91c2FuZCcsXG4gICAgbGFraDogICAgICdsYWtoJyxcbiAgICB3YW46ICAgICAgJ3dhbicsXG4gICAgbm9uZTogICAgICdub25lJyAgICBcbn07XG5cbk51bWVyYWxGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGdldFJhd1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5kZWxpbWl0ZXJSRSwgJycpLnJlcGxhY2UodGhpcy5udW1lcmFsRGVjaW1hbE1hcmssICcuJyk7XG4gICAgfSxcblxuICAgIGZvcm1hdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBhcnRzLCBwYXJ0U2lnbiwgcGFydFNpZ25BbmRQcmVmaXgsIHBhcnRJbnRlZ2VyLCBwYXJ0RGVjaW1hbCA9ICcnO1xuXG4gICAgICAgIC8vIHN0cmlwIGFscGhhYmV0IGxldHRlcnNcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bQS1aYS16XS9nLCAnJylcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZpcnN0IGRlY2ltYWwgbWFyayB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZShvd25lci5udW1lcmFsRGVjaW1hbE1hcmssICdNJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgbm9uIG51bWVyaWMgbGV0dGVycyBleGNlcHQgbWludXMgYW5kIFwiTVwiXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSBwcmVmaXggaGFzIGJlZW4gc3RyaXBwZWRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcZE0tXS9nLCAnJylcblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgbGVhZGluZyBtaW51cyB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcLS8sICdOJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgdGhlIG90aGVyIG1pbnVzIHNpZ24gKGlmIHByZXNlbnQpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwtL2csICcnKVxuXG4gICAgICAgICAgICAvLyByZXBsYWNlIHRoZSBtaW51cyBzaWduIChpZiBwcmVzZW50KVxuICAgICAgICAgICAgLnJlcGxhY2UoJ04nLCBvd25lci5udW1lcmFsUG9zaXRpdmVPbmx5ID8gJycgOiAnLScpXG5cbiAgICAgICAgICAgIC8vIHJlcGxhY2UgZGVjaW1hbCBtYXJrXG4gICAgICAgICAgICAucmVwbGFjZSgnTScsIG93bmVyLm51bWVyYWxEZWNpbWFsTWFyayk7XG5cbiAgICAgICAgLy8gc3RyaXAgYW55IGxlYWRpbmcgemVyb3NcbiAgICAgICAgaWYgKG93bmVyLnN0cmlwTGVhZGluZ1plcm9lcykge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKC0pPzArKD89XFxkKS8sICckMScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFydFNpZ24gPSB2YWx1ZS5zbGljZSgwLCAxKSA9PT0gJy0nID8gJy0nIDogJyc7XG4gICAgICAgIGlmICh0eXBlb2Ygb3duZXIucHJlZml4ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAob3duZXIuc2lnbkJlZm9yZVByZWZpeCkge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gcGFydFNpZ24gKyBvd25lci5wcmVmaXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gb3duZXIucHJlZml4ICsgcGFydFNpZ247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJ0U2lnbkFuZFByZWZpeCA9IHBhcnRTaWduO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwYXJ0SW50ZWdlciA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKG93bmVyLm51bWVyYWxEZWNpbWFsTWFyaykgPj0gMCkge1xuICAgICAgICAgICAgcGFydHMgPSB2YWx1ZS5zcGxpdChvd25lci5udW1lcmFsRGVjaW1hbE1hcmspO1xuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHBhcnREZWNpbWFsID0gb3duZXIubnVtZXJhbERlY2ltYWxNYXJrICsgcGFydHNbMV0uc2xpY2UoMCwgb3duZXIubnVtZXJhbERlY2ltYWxTY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwYXJ0U2lnbiA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJ0SW50ZWdlciA9IHBhcnRJbnRlZ2VyLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG93bmVyLm51bWVyYWxJbnRlZ2VyU2NhbGUgPiAwKSB7XG4gICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5zbGljZSgwLCBvd25lci5udW1lcmFsSW50ZWdlclNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAob3duZXIubnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUpIHtcbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUubGFraDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkKStcXGQkKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUud2FuOlxuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5yZXBsYWNlKC8oXFxkKSg/PShcXGR7NH0pKyQpL2csICckMScgKyBvd25lci5kZWxpbWl0ZXIpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE51bWVyYWxGb3JtYXR0ZXIuZ3JvdXBTdHlsZS50aG91c2FuZDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KSskKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3duZXIudGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRTaWduICsgcGFydEludGVnZXIudG9TdHJpbmcoKSArIChvd25lci5udW1lcmFsRGVjaW1hbFNjYWxlID4gMCA/IHBhcnREZWNpbWFsLnRvU3RyaW5nKCkgOiAnJykgKyBvd25lci5wcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFydFNpZ25BbmRQcmVmaXggKyBwYXJ0SW50ZWdlci50b1N0cmluZygpICsgKG93bmVyLm51bWVyYWxEZWNpbWFsU2NhbGUgPiAwID8gcGFydERlY2ltYWwudG9TdHJpbmcoKSA6ICcnKTtcbiAgICB9XG59O1xuXG52YXIgTnVtZXJhbEZvcm1hdHRlcl8xID0gTnVtZXJhbEZvcm1hdHRlcjtcblxudmFyIERhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZVBhdHRlcm4sIGRhdGVNaW4sIGRhdGVNYXgpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGF0ZSA9IFtdO1xuICAgIG93bmVyLmJsb2NrcyA9IFtdO1xuICAgIG93bmVyLmRhdGVQYXR0ZXJuID0gZGF0ZVBhdHRlcm47XG4gICAgb3duZXIuZGF0ZU1pbiA9IGRhdGVNaW5cbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWluLmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1pbi51bnNoaWZ0KDApO1xuXG4gICAgb3duZXIuZGF0ZU1heCA9IGRhdGVNYXhcbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWF4Lmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1heC51bnNoaWZ0KDApO1xuICAgIFxuICAgIG93bmVyLmluaXRCbG9ja3MoKTtcbn07XG5cbkRhdGVGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGluaXRCbG9ja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcztcbiAgICAgICAgb3duZXIuZGF0ZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1knKSB7XG4gICAgICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goNCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG93bmVyLmJsb2Nrcy5wdXNoKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgZGF0ZSA9IG93bmVyLmRhdGU7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVbMl0gPyAoXG4gICAgICAgICAgICBkYXRlWzJdICsgJy0nICsgb3duZXIuYWRkTGVhZGluZ1plcm8oZGF0ZVsxXSkgKyAnLScgKyBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzBdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFZhbGlkYXRlZERhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCByZXN1bHQgPSAnJztcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci5kYXRlUGF0dGVybltpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YiA9PT0gJzAwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAxJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMCcgKyBzdWIwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YiwgMTApID4gMzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICczMSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViID09PSAnMDAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMDEnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YjAsIDEwKSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzEyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcmVtYWluaW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rml4ZWREYXRlU3RyaW5nKHJlc3VsdCk7XG4gICAgfSxcblxuICAgIGdldEZpeGVkRGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sIGRhdGUgPSBbXSxcbiAgICAgICAgICAgIGRheUluZGV4ID0gMCwgbW9udGhJbmRleCA9IDAsIHllYXJJbmRleCA9IDAsXG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gMCwgbW9udGhTdGFydEluZGV4ID0gMCwgeWVhclN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgZGF5LCBtb250aCwgeWVhciwgZnVsbFllYXJEb25lID0gZmFsc2U7XG5cbiAgICAgICAgLy8gbW0tZGQgfHwgZGQtbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiBkYXRlUGF0dGVyblswXS50b0xvd2VyQ2FzZSgpICE9PSAneScgJiYgZGF0ZVBhdHRlcm5bMV0udG9Mb3dlckNhc2UoKSAhPT0gJ3knKSB7XG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdkJyA/IDAgOiAyO1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gMiAtIGRheVN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICBkYXRlID0gdGhpcy5nZXRGaXhlZERhdGUoZGF5LCBtb250aCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB5eXl5LW1tLWRkIHx8IHl5eXktZGQtbW0gfHwgbW0tZGQteXl5eSB8fCBkZC1tbS15eXl5IHx8IGRkLXl5eXktbW0gfHwgbW0teXl5eS1kZFxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA4KSB7XG4gICAgICAgICAgICBkYXRlUGF0dGVybi5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB5ZWFySW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHllYXJTdGFydEluZGV4ID0geWVhckluZGV4ICogMjtcbiAgICAgICAgICAgIGRheVN0YXJ0SW5kZXggPSAoZGF5SW5kZXggPD0geWVhckluZGV4KSA/IGRheUluZGV4ICogMiA6IChkYXlJbmRleCAqIDIgKyAyKTtcbiAgICAgICAgICAgIG1vbnRoU3RhcnRJbmRleCA9IChtb250aEluZGV4IDw9IHllYXJJbmRleCkgPyBtb250aEluZGV4ICogMiA6IChtb250aEluZGV4ICogMiArIDIpO1xuXG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgeWVhciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLCAxMCk7XG5cbiAgICAgICAgICAgIGZ1bGxZZWFyRG9uZSA9IHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLmxlbmd0aCA9PT0gNDtcblxuICAgICAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0Rml4ZWREYXRlKGRheSwgbW9udGgsIHllYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW0teXkgfHwgeXktbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiAoZGF0ZVBhdHRlcm5bMF0gPT09ICd5JyB8fCBkYXRlUGF0dGVyblsxXSA9PT0gJ3knKSkge1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdtJyA/IDAgOiAyO1xuICAgICAgICAgICAgeWVhclN0YXJ0SW5kZXggPSAyIC0gbW9udGhTdGFydEluZGV4O1xuICAgICAgICAgICAgbW9udGggPSBwYXJzZUludCh2YWx1ZS5zbGljZShtb250aFN0YXJ0SW5kZXgsIG1vbnRoU3RhcnRJbmRleCArIDIpLCAxMCk7XG4gICAgICAgICAgICB5ZWFyID0gcGFyc2VJbnQodmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMiksIDEwKTtcblxuICAgICAgICAgICAgZnVsbFllYXJEb25lID0gdmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMikubGVuZ3RoID09PSAyO1xuXG4gICAgICAgICAgICBkYXRlID0gWzAsIG1vbnRoLCB5ZWFyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1tLXl5eXkgfHwgeXl5eS1tbVxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA2ICYmIChkYXRlUGF0dGVyblswXSA9PT0gJ1knIHx8IGRhdGVQYXR0ZXJuWzFdID09PSAnWScpKSB7XG4gICAgICAgICAgICBtb250aFN0YXJ0SW5kZXggPSBkYXRlUGF0dGVyblswXSA9PT0gJ20nID8gMCA6IDQ7XG4gICAgICAgICAgICB5ZWFyU3RhcnRJbmRleCA9IDIgLSAwLjUgKiBtb250aFN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBtb250aCA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1vbnRoU3RhcnRJbmRleCwgbW9udGhTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIHllYXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KSwgMTApO1xuXG4gICAgICAgICAgICBmdWxsWWVhckRvbmUgPSB2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KS5sZW5ndGggPT09IDQ7XG5cbiAgICAgICAgICAgIGRhdGUgPSBbMCwgbW9udGgsIHllYXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZSA9IG93bmVyLmdldFJhbmdlRml4ZWREYXRlKGRhdGUpO1xuICAgICAgICBvd25lci5kYXRlID0gZGF0ZTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0ZS5sZW5ndGggPT09IDAgPyB2YWx1ZSA6IGRhdGVQYXR0ZXJuLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgKGRhdGVbMF0gPT09IDAgPyAnJyA6IG93bmVyLmFkZExlYWRpbmdaZXJvKGRhdGVbMF0pKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChkYXRlWzFdID09PSAwID8gJycgOiBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzFdKSk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyAoZnVsbFllYXJEb25lID8gb3duZXIuYWRkTGVhZGluZ1plcm9Gb3JZZWFyKGRhdGVbMl0sIGZhbHNlKSA6ICcnKTtcbiAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChmdWxsWWVhckRvbmUgPyBvd25lci5hZGRMZWFkaW5nWmVyb0ZvclllYXIoZGF0ZVsyXSwgdHJ1ZSkgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICcnKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBnZXRSYW5nZUZpeGVkRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sXG4gICAgICAgICAgICBkYXRlTWluID0gb3duZXIuZGF0ZU1pbiB8fCBbXSxcbiAgICAgICAgICAgIGRhdGVNYXggPSBvd25lci5kYXRlTWF4IHx8IFtdO1xuXG4gICAgICAgIGlmICghZGF0ZS5sZW5ndGggfHwgKGRhdGVNaW4ubGVuZ3RoIDwgMyAmJiBkYXRlTWF4Lmxlbmd0aCA8IDMpKSByZXR1cm4gZGF0ZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGF0ZVBhdHRlcm4uZmluZChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4geC50b0xvd2VyQ2FzZSgpID09PSAneSc7XG4gICAgICAgICAgfSkgJiZcbiAgICAgICAgICBkYXRlWzJdID09PSAwXG4gICAgICAgICkgcmV0dXJuIGRhdGU7XG5cbiAgICAgICAgaWYgKGRhdGVNYXgubGVuZ3RoICYmIChkYXRlTWF4WzJdIDwgZGF0ZVsyXSB8fCAoXG4gICAgICAgICAgZGF0ZU1heFsyXSA9PT0gZGF0ZVsyXSAmJiAoZGF0ZU1heFsxXSA8IGRhdGVbMV0gfHwgKFxuICAgICAgICAgICAgZGF0ZU1heFsxXSA9PT0gZGF0ZVsxXSAmJiBkYXRlTWF4WzBdIDwgZGF0ZVswXVxuICAgICAgICAgICkpXG4gICAgICAgICkpKSByZXR1cm4gZGF0ZU1heDtcblxuICAgICAgICBpZiAoZGF0ZU1pbi5sZW5ndGggJiYgKGRhdGVNaW5bMl0gPiBkYXRlWzJdIHx8IChcbiAgICAgICAgICBkYXRlTWluWzJdID09PSBkYXRlWzJdICYmIChkYXRlTWluWzFdID4gZGF0ZVsxXSB8fCAoXG4gICAgICAgICAgICBkYXRlTWluWzFdID09PSBkYXRlWzFdICYmIGRhdGVNaW5bMF0gPiBkYXRlWzBdXG4gICAgICAgICAgKSlcbiAgICAgICAgKSkpIHJldHVybiBkYXRlTWluO1xuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZERhdGU6IGZ1bmN0aW9uIChkYXksIG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIGRheSA9IE1hdGgubWluKGRheSwgMzEpO1xuICAgICAgICBtb250aCA9IE1hdGgubWluKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgPSBwYXJzZUludCgoeWVhciB8fCAwKSwgMTApO1xuXG4gICAgICAgIGlmICgobW9udGggPCA3ICYmIG1vbnRoICUgMiA9PT0gMCkgfHwgKG1vbnRoID4gOCAmJiBtb250aCAlIDIgPT09IDEpKSB7XG4gICAgICAgICAgICBkYXkgPSBNYXRoLm1pbihkYXksIG1vbnRoID09PSAyID8gKHRoaXMuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogMzApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtkYXksIG1vbnRoLCB5ZWFyXTtcbiAgICB9LFxuXG4gICAgaXNMZWFwWWVhcjogZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICgoeWVhciAlIDQgPT09IDApICYmICh5ZWFyICUgMTAwICE9PSAwKSkgfHwgKHllYXIgJSA0MDAgPT09IDApO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVyb0ZvclllYXI6IGZ1bmN0aW9uIChudW1iZXIsIGZ1bGxZZWFyTW9kZSkge1xuICAgICAgICBpZiAoZnVsbFllYXJNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAwMCcgOiAobnVtYmVyIDwgMTAwID8gJzAwJyA6IChudW1iZXIgPCAxMDAwID8gJzAnIDogJycpKSkgKyBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBEYXRlRm9ybWF0dGVyXzEgPSBEYXRlRm9ybWF0dGVyO1xuXG52YXIgVGltZUZvcm1hdHRlciA9IGZ1bmN0aW9uICh0aW1lUGF0dGVybiwgdGltZUZvcm1hdCkge1xuICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICBvd25lci50aW1lID0gW107XG4gICAgb3duZXIuYmxvY2tzID0gW107XG4gICAgb3duZXIudGltZVBhdHRlcm4gPSB0aW1lUGF0dGVybjtcbiAgICBvd25lci50aW1lRm9ybWF0ID0gdGltZUZvcm1hdDtcbiAgICBvd25lci5pbml0QmxvY2tzKCk7XG59O1xuXG5UaW1lRm9ybWF0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBpbml0QmxvY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIG93bmVyLnRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goMik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRJU09Gb3JtYXRUaW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICB0aW1lID0gb3duZXIudGltZTtcblxuICAgICAgICByZXR1cm4gdGltZVsyXSA/IChcbiAgICAgICAgICAgIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMF0pICsgJzonICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSkgKyAnOicgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzJdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFRpbWVGb3JtYXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIGlmIChTdHJpbmcob3duZXIudGltZUZvcm1hdCkgPT09ICcxMicpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWF4SG91ckZpcnN0RGlnaXQ6IDEsXG4gICAgICAgICAgICAgICAgbWF4SG91cnM6IDEyLFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXNGaXJzdERpZ2l0OiA1LFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXM6IDYwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1heEhvdXJGaXJzdERpZ2l0OiAyLFxuICAgICAgICAgICAgbWF4SG91cnM6IDIzLFxuICAgICAgICAgICAgbWF4TWludXRlc0ZpcnN0RGlnaXQ6IDUsXG4gICAgICAgICAgICBtYXhNaW51dGVzOiA2MFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRWYWxpZGF0ZWRUaW1lOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xuXG4gICAgICAgIHZhciB0aW1lRm9ybWF0T3B0aW9ucyA9IG93bmVyLmdldFRpbWVGb3JtYXRPcHRpb25zKCk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci50aW1lUGF0dGVybltpbmRleF0pIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoc3ViMCwgMTApID4gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91ckZpcnN0RGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91cnMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhNaW51dGVzRmlyc3REaWdpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAnICsgc3ViMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIsIDEwKSA+IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3ViO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHJlbWFpbmluZyBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEZpeGVkVGltZVN0cmluZyhyZXN1bHQpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCB0aW1lUGF0dGVybiA9IG93bmVyLnRpbWVQYXR0ZXJuLCB0aW1lID0gW10sXG4gICAgICAgICAgICBzZWNvbmRJbmRleCA9IDAsIG1pbnV0ZUluZGV4ID0gMCwgaG91ckluZGV4ID0gMCxcbiAgICAgICAgICAgIHNlY29uZFN0YXJ0SW5kZXggPSAwLCBtaW51dGVTdGFydEluZGV4ID0gMCwgaG91clN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgc2Vjb25kLCBtaW51dGUsIGhvdXI7XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgICAgdGltZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kSW5kZXggPSBpbmRleCAqIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBtaW51dGVJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIGhvdXJJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGhvdXJTdGFydEluZGV4ID0gaG91ckluZGV4O1xuICAgICAgICAgICAgbWludXRlU3RhcnRJbmRleCA9IG1pbnV0ZUluZGV4O1xuICAgICAgICAgICAgc2Vjb25kU3RhcnRJbmRleCA9IHNlY29uZEluZGV4O1xuXG4gICAgICAgICAgICBzZWNvbmQgPSBwYXJzZUludCh2YWx1ZS5zbGljZShzZWNvbmRTdGFydEluZGV4LCBzZWNvbmRTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1pbnV0ZVN0YXJ0SW5kZXgsIG1pbnV0ZVN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgaG91ciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKGhvdXJTdGFydEluZGV4LCBob3VyU3RhcnRJbmRleCArIDIpLCAxMCk7XG5cbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLmdldEZpeGVkVGltZShob3VyLCBtaW51dGUsIHNlY29uZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA0ICYmIG93bmVyLnRpbWVQYXR0ZXJuLmluZGV4T2YoJ3MnKSA8IDApIHtcbiAgICAgICAgICAgIHRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZUluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgaG91ckluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaG91clN0YXJ0SW5kZXggPSBob3VySW5kZXg7XG4gICAgICAgICAgICBtaW51dGVTdGFydEluZGV4ID0gbWludXRlSW5kZXg7XG5cbiAgICAgICAgICAgIHNlY29uZCA9IDA7XG4gICAgICAgICAgICBtaW51dGUgPSBwYXJzZUludCh2YWx1ZS5zbGljZShtaW51dGVTdGFydEluZGV4LCBtaW51dGVTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIGhvdXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZShob3VyU3RhcnRJbmRleCwgaG91clN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICB0aW1lID0gdGhpcy5nZXRGaXhlZFRpbWUoaG91ciwgbWludXRlLCBzZWNvbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duZXIudGltZSA9IHRpbWU7XG5cbiAgICAgICAgcmV0dXJuIHRpbWUubGVuZ3RoID09PSAwID8gdmFsdWUgOiB0aW1lUGF0dGVybi5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMl0pO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgJycpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWU6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIHNlY29uZCkge1xuICAgICAgICBzZWNvbmQgPSBNYXRoLm1pbihwYXJzZUludChzZWNvbmQgfHwgMCwgMTApLCA2MCk7XG4gICAgICAgIG1pbnV0ZSA9IE1hdGgubWluKG1pbnV0ZSwgNjApO1xuICAgICAgICBob3VyID0gTWF0aC5taW4oaG91ciwgNjApO1xuXG4gICAgICAgIHJldHVybiBbaG91ciwgbWludXRlLCBzZWNvbmRdO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBUaW1lRm9ybWF0dGVyXzEgPSBUaW1lRm9ybWF0dGVyO1xuXG52YXIgUGhvbmVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZm9ybWF0dGVyLCBkZWxpbWl0ZXIpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcgJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG5cbiAgICBvd25lci5mb3JtYXR0ZXIgPSBmb3JtYXR0ZXI7XG59O1xuXG5QaG9uZUZvcm1hdHRlci5wcm90b3R5cGUgPSB7XG4gICAgc2V0Rm9ybWF0dGVyOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyID0gZm9ybWF0dGVyO1xuICAgIH0sXG5cbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIChwaG9uZU51bWJlcikge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmZvcm1hdHRlci5jbGVhcigpO1xuXG4gICAgICAgIC8vIG9ubHkga2VlcCBudW1iZXIgYW5kICtcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKC9bXlxcZCtdL2csICcnKTtcblxuICAgICAgICAvLyBzdHJpcCBub24tbGVhZGluZyArXG4gICAgICAgIHBob25lTnVtYmVyID0gcGhvbmVOdW1iZXIucmVwbGFjZSgvXlxcKy8sICdCJykucmVwbGFjZSgvXFwrL2csICcnKS5yZXBsYWNlKCdCJywgJysnKTtcblxuICAgICAgICAvLyBzdHJpcCBkZWxpbWl0ZXJcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKG93bmVyLmRlbGltaXRlclJFLCAnJyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLCBjdXJyZW50LCB2YWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaU1heCA9IHBob25lTnVtYmVyLmxlbmd0aDsgaSA8IGlNYXg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudCA9IG93bmVyLmZvcm1hdHRlci5pbnB1dERpZ2l0KHBob25lTnVtYmVyLmNoYXJBdChpKSk7XG5cbiAgICAgICAgICAgIC8vIGhhcyAoKS0gb3Igc3BhY2UgaW5zaWRlXG4gICAgICAgICAgICBpZiAoL1tcXHMoKS1dL2cudGVzdChjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlOiBvdmVyIGxlbmd0aCBpbnB1dFxuICAgICAgICAgICAgICAgIC8vIGl0IHR1cm5zIHRvIGludmFsaWQgbnVtYmVyIGFnYWluXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpcCAoKVxuICAgICAgICAvLyBlLmcuIFVTOiA3MTYxMjM0NTY3IHJldHVybnMgKDcxNikgMTIzLTQ1NjdcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL1soKV0vZywgJycpO1xuICAgICAgICAvLyByZXBsYWNlIGxpYnJhcnkgZGVsaW1pdGVyIHdpdGggdXNlciBjdXN0b21pemVkIGRlbGltaXRlclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvW1xccy1dL2csIG93bmVyLmRlbGltaXRlcik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG52YXIgUGhvbmVGb3JtYXR0ZXJfMSA9IFBob25lRm9ybWF0dGVyO1xuXG52YXIgQ3JlZGl0Q2FyZERldGVjdG9yID0ge1xuICAgIGJsb2Nrczoge1xuICAgICAgICB1YXRwOiAgICAgICAgICBbNCwgNSwgNl0sXG4gICAgICAgIGFtZXg6ICAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgZGluZXJzOiAgICAgICAgWzQsIDYsIDRdLFxuICAgICAgICBkaXNjb3ZlcjogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIG1hc3RlcmNhcmQ6ICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgZGFua29ydDogICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBpbnN0YXBheW1lbnQ6ICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGpjYjE1OiAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgamNiOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBtYWVzdHJvOiAgICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIHZpc2E6ICAgICAgICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgbWlyOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICB1bmlvblBheTogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGdlbmVyYWw6ICAgICAgIFs0LCA0LCA0LCA0XVxuICAgIH0sXG5cbiAgICByZToge1xuICAgICAgICAvLyBzdGFydHMgd2l0aCAxOyAxNSBkaWdpdHMsIG5vdCBzdGFydHMgd2l0aCAxODAwIChqY2IgY2FyZClcbiAgICAgICAgdWF0cDogL14oPyExODAwKTFcXGR7MCwxNH0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDM0LzM3OyAxNSBkaWdpdHNcbiAgICAgICAgYW1leDogL14zWzQ3XVxcZHswLDEzfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjAxMS82NS82NDQtNjQ5OyAxNiBkaWdpdHNcbiAgICAgICAgZGlzY292ZXI6IC9eKD86NjAxMXw2NVxcZHswLDJ9fDY0WzQtOV1cXGQ/KVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggMzAwLTMwNS8zMDkgb3IgMzYvMzgvMzk7IDE0IGRpZ2l0c1xuICAgICAgICBkaW5lcnM6IC9eMyg/OjAoWzAtNV18OSl8WzY4OV1cXGQ/KVxcZHswLDExfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNTEtNTUvMjIyMeKAkzI3MjA7IDE2IGRpZ2l0c1xuICAgICAgICBtYXN0ZXJjYXJkOiAvXig1WzEtNV1cXGR7MCwyfXwyMlsyLTldXFxkezAsMX18MlszLTddXFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCA1MDE5LzQxNzUvNDU3MTsgMTYgZGlnaXRzXG4gICAgICAgIGRhbmtvcnQ6IC9eKDUwMTl8NDE3NXw0NTcxKVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjM3LTYzOTsgMTYgZGlnaXRzXG4gICAgICAgIGluc3RhcGF5bWVudDogL142M1s3LTldXFxkezAsMTN9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDA7IDE1IGRpZ2l0c1xuICAgICAgICBqY2IxNTogL14oPzoyMTMxfDE4MDApXFxkezAsMTF9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDAvMzU7IDE2IGRpZ2l0c1xuICAgICAgICBqY2I6IC9eKD86MzVcXGR7MCwyfSlcXGR7MCwxMn0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDUwLzU2LTU4LzYzMDQvNjc7IDE2IGRpZ2l0c1xuICAgICAgICBtYWVzdHJvOiAvXig/OjVbMDY3OF1cXGR7MCwyfXw2MzA0fDY3XFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMjsgMTYgZGlnaXRzXG4gICAgICAgIG1pcjogL14yMjBbMC00XVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNDsgMTYgZGlnaXRzXG4gICAgICAgIHZpc2E6IC9eNFxcZHswLDE1fS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjIvODE7IDE2IGRpZ2l0c1xuICAgICAgICB1bmlvblBheTogL14oNjJ8ODEpXFxkezAsMTR9L1xuICAgIH0sXG5cbiAgICBnZXRTdHJpY3RCbG9ja3M6IGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIHRvdGFsID0gYmxvY2sucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBwcmV2ICsgY3VycmVudDtcbiAgICAgIH0sIDApO1xuXG4gICAgICByZXR1cm4gYmxvY2suY29uY2F0KDE5IC0gdG90YWwpO1xuICAgIH0sXG5cbiAgICBnZXRJbmZvOiBmdW5jdGlvbiAodmFsdWUsIHN0cmljdE1vZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrcyA9IENyZWRpdENhcmREZXRlY3Rvci5ibG9ja3MsXG4gICAgICAgICAgICByZSA9IENyZWRpdENhcmREZXRlY3Rvci5yZTtcblxuICAgICAgICAvLyBTb21lIGNyZWRpdCBjYXJkIGNhbiBoYXZlIHVwIHRvIDE5IGRpZ2l0cyBudW1iZXIuXG4gICAgICAgIC8vIFNldCBzdHJpY3RNb2RlIHRvIHRydWUgd2lsbCByZW1vdmUgdGhlIDE2IG1heC1sZW5ndGggcmVzdHJhaW4sXG4gICAgICAgIC8vIGhvd2V2ZXIsIEkgbmV2ZXIgZm91bmQgYW55IHdlYnNpdGUgdmFsaWRhdGUgY2FyZCBudW1iZXIgbGlrZVxuICAgICAgICAvLyB0aGlzLCBoZW5jZSBwcm9iYWJseSB5b3UgZG9uJ3Qgd2FudCB0byBlbmFibGUgdGhpcyBvcHRpb24uXG4gICAgICAgIHN0cmljdE1vZGUgPSAhIXN0cmljdE1vZGU7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlKSB7XG4gICAgICAgICAgICBpZiAocmVba2V5XS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkQmxvY2tzID0gYmxvY2tzW2tleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZToga2V5LFxuICAgICAgICAgICAgICAgICAgICBibG9ja3M6IHN0cmljdE1vZGUgPyB0aGlzLmdldFN0cmljdEJsb2NrcyhtYXRjaGVkQmxvY2tzKSA6IG1hdGNoZWRCbG9ja3NcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICd1bmtub3duJyxcbiAgICAgICAgICAgIGJsb2Nrczogc3RyaWN0TW9kZSA/IHRoaXMuZ2V0U3RyaWN0QmxvY2tzKGJsb2Nrcy5nZW5lcmFsKSA6IGJsb2Nrcy5nZW5lcmFsXG4gICAgICAgIH07XG4gICAgfVxufTtcblxudmFyIENyZWRpdENhcmREZXRlY3Rvcl8xID0gQ3JlZGl0Q2FyZERldGVjdG9yO1xuXG52YXIgVXRpbCA9IHtcbiAgICBub29wOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIHN0cmlwOiBmdW5jdGlvbiAodmFsdWUsIHJlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCAnJyk7XG4gICAgfSxcblxuICAgIGdldFBvc3REZWxpbWl0ZXI6IGZ1bmN0aW9uICh2YWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAgIC8vIHNpbmdsZSBkZWxpbWl0ZXJcbiAgICAgICAgaWYgKGRlbGltaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXIgPyBkZWxpbWl0ZXIgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG11bHRpcGxlIGRlbGltaXRlcnNcbiAgICAgICAgdmFyIG1hdGNoZWREZWxpbWl0ZXIgPSAnJztcbiAgICAgICAgZGVsaW1pdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2xpY2UoLWN1cnJlbnQubGVuZ3RoKSA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICAgIG1hdGNoZWREZWxpbWl0ZXIgPSBjdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWF0Y2hlZERlbGltaXRlcjtcbiAgICB9LFxuXG4gICAgZ2V0RGVsaW1pdGVyUkVCeURlbGltaXRlcjogZnVuY3Rpb24gKGRlbGltaXRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChkZWxpbWl0ZXIucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKSwgJ2cnKTtcbiAgICB9LFxuXG4gICAgZ2V0TmV4dEN1cnNvclBvc2l0aW9uOiBmdW5jdGlvbiAocHJldlBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpIHtcbiAgICAgIC8vIElmIGN1cnNvciB3YXMgYXQgdGhlIGVuZCBvZiB2YWx1ZSwganVzdCBwbGFjZSBpdCBiYWNrLlxuICAgICAgLy8gQmVjYXVzZSBuZXcgdmFsdWUgY291bGQgY29udGFpbiBhZGRpdGlvbmFsIGNoYXJzLlxuICAgICAgaWYgKG9sZFZhbHVlLmxlbmd0aCA9PT0gcHJldlBvcykge1xuICAgICAgICAgIHJldHVybiBuZXdWYWx1ZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2UG9zICsgdGhpcy5nZXRQb3NpdGlvbk9mZnNldChwcmV2UG9zLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIGRlbGltaXRlciAsZGVsaW1pdGVycyk7XG4gICAgfSxcblxuICAgIGdldFBvc2l0aW9uT2Zmc2V0OiBmdW5jdGlvbiAocHJldlBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpIHtcbiAgICAgICAgdmFyIG9sZFJhd1ZhbHVlLCBuZXdSYXdWYWx1ZSwgbGVuZ3RoT2Zmc2V0O1xuXG4gICAgICAgIG9sZFJhd1ZhbHVlID0gdGhpcy5zdHJpcERlbGltaXRlcnMob2xkVmFsdWUuc2xpY2UoMCwgcHJldlBvcyksIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG4gICAgICAgIG5ld1Jhd1ZhbHVlID0gdGhpcy5zdHJpcERlbGltaXRlcnMobmV3VmFsdWUuc2xpY2UoMCwgcHJldlBvcyksIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG4gICAgICAgIGxlbmd0aE9mZnNldCA9IG9sZFJhd1ZhbHVlLmxlbmd0aCAtIG5ld1Jhd1ZhbHVlLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gKGxlbmd0aE9mZnNldCAhPT0gMCkgPyAobGVuZ3RoT2Zmc2V0IC8gTWF0aC5hYnMobGVuZ3RoT2Zmc2V0KSkgOiAwO1xuICAgIH0sXG5cbiAgICBzdHJpcERlbGltaXRlcnM6IGZ1bmN0aW9uICh2YWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICAgICAgLy8gc2luZ2xlIGRlbGltaXRlclxuICAgICAgICBpZiAoZGVsaW1pdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhciBkZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG93bmVyLmdldERlbGltaXRlclJFQnlEZWxpbWl0ZXIoZGVsaW1pdGVyKSA6ICcnO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShkZWxpbWl0ZXJSRSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbXVsdGlwbGUgZGVsaW1pdGVyc1xuICAgICAgICBkZWxpbWl0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShvd25lci5nZXREZWxpbWl0ZXJSRUJ5RGVsaW1pdGVyKGxldHRlciksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGhlYWRTdHI6IGZ1bmN0aW9uIChzdHIsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfSxcblxuICAgIGdldE1heExlbmd0aDogZnVuY3Rpb24gKGJsb2Nrcykge1xuICAgICAgICByZXR1cm4gYmxvY2tzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIGN1cnJlbnQ7XG4gICAgICAgIH0sIDApO1xuICAgIH0sXG5cbiAgICAvLyBzdHJpcCBwcmVmaXhcbiAgICAvLyBCZWZvcmUgdHlwZSAgfCAgIEFmdGVyIHR5cGUgICAgfCAgICAgUmV0dXJuIHZhbHVlXG4gICAgLy8gUEVGSVgtLi4uICAgIHwgICBQRUZJWC0uLi4gICAgIHwgICAgICcnXG4gICAgLy8gUFJFRklYLTEyMyAgIHwgICBQRUZJWC0xMjMgICAgIHwgICAgIDEyM1xuICAgIC8vIFBSRUZJWC0xMjMgICB8ICAgUFJFRklYLTIzICAgICB8ICAgICAyM1xuICAgIC8vIFBSRUZJWC0xMjMgICB8ICAgUFJFRklYLTEyMzQgICB8ICAgICAxMjM0XG4gICAgZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBwcmVmaXgsIHByZWZpeExlbmd0aCwgcHJldlJlc3VsdCwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzLCBub0ltbWVkaWF0ZVByZWZpeCwgdGFpbFByZWZpeCwgc2lnbkJlZm9yZVByZWZpeCkge1xuICAgICAgICAvLyBObyBwcmVmaXhcbiAgICAgICAgaWYgKHByZWZpeExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbHVlIGlzIHByZWZpeFxuICAgICAgICBpZiAodmFsdWUgPT09IHByZWZpeCAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2lnbkJlZm9yZVByZWZpeCAmJiAodmFsdWUuc2xpY2UoMCwgMSkgPT0gJy0nKSkge1xuICAgICAgICAgICAgdmFyIHByZXYgPSAocHJldlJlc3VsdC5zbGljZSgwLCAxKSA9PSAnLScpID8gcHJldlJlc3VsdC5zbGljZSgxKSA6IHByZXZSZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gJy0nICsgdGhpcy5nZXRQcmVmaXhTdHJpcHBlZFZhbHVlKHZhbHVlLnNsaWNlKDEpLCBwcmVmaXgsIHByZWZpeExlbmd0aCwgcHJldiwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzLCBub0ltbWVkaWF0ZVByZWZpeCwgdGFpbFByZWZpeCwgc2lnbkJlZm9yZVByZWZpeCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmUgcmVzdWx0IHByZWZpeCBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggcHJlLWRlZmluZWQgcHJlZml4XG4gICAgICAgIGlmIChwcmV2UmVzdWx0LnNsaWNlKDAsIHByZWZpeExlbmd0aCkgIT09IHByZWZpeCAmJiAhdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZpcnN0IHRpbWUgdXNlciBlbnRlcmVkIHNvbWV0aGluZ1xuICAgICAgICAgICAgaWYgKG5vSW1tZWRpYXRlUHJlZml4ICYmICFwcmV2UmVzdWx0ICYmIHZhbHVlKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldlJlc3VsdC5zbGljZSgtcHJlZml4TGVuZ3RoKSAhPT0gcHJlZml4ICYmIHRhaWxQcmVmaXgpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaXJzdCB0aW1lIHVzZXIgZW50ZXJlZCBzb21ldGhpbmdcbiAgICAgICAgICAgIGlmIChub0ltbWVkaWF0ZVByZWZpeCAmJiAhcHJldlJlc3VsdCAmJiB2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHRoaXMuc3RyaXBEZWxpbWl0ZXJzKHByZXZSZXN1bHQsIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG5cbiAgICAgICAgLy8gTmV3IHZhbHVlIGhhcyBpc3N1ZSwgc29tZW9uZSB0eXBlZCBpbiBiZXR3ZWVuIHByZWZpeCBsZXR0ZXJzXG4gICAgICAgIC8vIFJldmVydCB0byBwcmUgdmFsdWVcbiAgICAgICAgaWYgKHZhbHVlLnNsaWNlKDAsIHByZWZpeExlbmd0aCkgIT09IHByZWZpeCAmJiAhdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZWYWx1ZS5zbGljZShwcmVmaXhMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnNsaWNlKC1wcmVmaXhMZW5ndGgpICE9PSBwcmVmaXggJiYgdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZWYWx1ZS5zbGljZSgwLCAtcHJlZml4TGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBpc3N1ZSwgc3RyaXAgcHJlZml4IGZvciBuZXcgdmFsdWVcbiAgICAgICAgcmV0dXJuIHRhaWxQcmVmaXggPyB2YWx1ZS5zbGljZSgwLCAtcHJlZml4TGVuZ3RoKSA6IHZhbHVlLnNsaWNlKHByZWZpeExlbmd0aCk7XG4gICAgfSxcblxuICAgIGdldEZpcnN0RGlmZkluZGV4OiBmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICAgIHdoaWxlIChwcmV2LmNoYXJBdChpbmRleCkgPT09IGN1cnJlbnQuY2hhckF0KGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKHByZXYuY2hhckF0KGluZGV4KyspID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgYmxvY2tzLCBibG9ja3NMZW5ndGgsIGRlbGltaXRlciwgZGVsaW1pdGVycywgZGVsaW1pdGVyTGF6eVNob3cpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLFxuICAgICAgICAgICAgbXVsdGlwbGVEZWxpbWl0ZXJzID0gZGVsaW1pdGVycy5sZW5ndGggPiAwLFxuICAgICAgICAgICAgY3VycmVudERlbGltaXRlciA9ICcnO1xuXG4gICAgICAgIC8vIG5vIG9wdGlvbnMsIG5vcm1hbCBpbnB1dFxuICAgICAgICBpZiAoYmxvY2tzTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAobGVuZ3RoLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gdmFsdWUuc2xpY2UoMCwgbGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdCA9IHZhbHVlLnNsaWNlKGxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlwbGVEZWxpbWl0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREZWxpbWl0ZXIgPSBkZWxpbWl0ZXJzW2RlbGltaXRlckxhenlTaG93ID8gKGluZGV4IC0gMSkgOiBpbmRleF0gfHwgY3VycmVudERlbGltaXRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGVsaW1pdGVyID0gZGVsaW1pdGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkZWxpbWl0ZXJMYXp5U2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gY3VycmVudERlbGltaXRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN1YjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViLmxlbmd0aCA9PT0gbGVuZ3RoICYmIGluZGV4IDwgYmxvY2tzTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGN1cnJlbnREZWxpbWl0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcmVtYWluaW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgLy8gbW92ZSBjdXJzb3IgdG8gdGhlIGVuZFxuICAgIC8vIHRoZSBmaXJzdCB0aW1lIHVzZXIgZm9jdXNlcyBvbiBhbiBpbnB1dCB3aXRoIHByZWZpeFxuICAgIGZpeFByZWZpeEN1cnNvcjogZnVuY3Rpb24gKGVsLCBwcmVmaXgsIGRlbGltaXRlciwgZGVsaW1pdGVycykge1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsID0gZWwudmFsdWUsXG4gICAgICAgICAgICBhcHBlbmRpeCA9IGRlbGltaXRlciB8fCAoZGVsaW1pdGVyc1swXSB8fCAnICcpO1xuXG4gICAgICAgIGlmICghZWwuc2V0U2VsZWN0aW9uUmFuZ2UgfHwgIXByZWZpeCB8fCAocHJlZml4Lmxlbmd0aCArIGFwcGVuZGl4Lmxlbmd0aCkgPD0gdmFsLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGggKiAyO1xuXG4gICAgICAgIC8vIHNldCB0aW1lb3V0IHRvIGF2b2lkIGJsaW5rXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWwuc2V0U2VsZWN0aW9uUmFuZ2UobGVuLCBsZW4pO1xuICAgICAgICB9LCAxKTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2sgaWYgaW5wdXQgZmllbGQgaXMgZnVsbHkgc2VsZWN0ZWRcbiAgICBjaGVja0Z1bGxTZWxlY3Rpb246IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpIHx8IGRvY3VtZW50LmdldFNlbGVjdGlvbigpIHx8IHt9O1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnRvU3RyaW5nKCkubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBJZ25vcmVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChlbGVtZW50LCBwb3NpdGlvbiwgZG9jKSB7XG4gICAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoZG9jKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3Vyc29yIGlzIGFscmVhZHkgaW4gdGhlIGVuZFxuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnZhbHVlLmxlbmd0aCA8PSBwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZWxlbWVudC5jcmVhdGVUZXh0UmFuZ2UoKTtcblxuICAgICAgICAgICAgcmFuZ2UubW92ZSgnY2hhcmFjdGVyJywgcG9zaXRpb24pO1xuICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb24sIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBpbnB1dCBlbGVtZW50IHR5cGUgZG9lcyBub3Qgc3VwcG9ydCBzZWxlY3Rpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRBY3RpdmVFbGVtZW50OiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBwYXJlbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgfSxcblxuICAgIGlzQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yICYmIC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9LFxuXG4gICAgLy8gT24gQW5kcm9pZCBjaHJvbWUsIHRoZSBrZXl1cCBhbmQga2V5ZG93biBldmVudHNcbiAgICAvLyBhbHdheXMgcmV0dXJuIGtleSBjb2RlIDIyOSBhcyBhIGNvbXBvc2l0aW9uIHRoYXRcbiAgICAvLyBidWZmZXJzIHRoZSB1c2Vy4oCZcyBrZXlzdHJva2VzXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub3Npci9jbGVhdmUuanMvaXNzdWVzLzE0N1xuICAgIGlzQW5kcm9pZEJhY2tzcGFjZUtleWRvd246IGZ1bmN0aW9uIChsYXN0SW5wdXRWYWx1ZSwgY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQW5kcm9pZCgpIHx8ICFsYXN0SW5wdXRWYWx1ZSB8fCAhY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50SW5wdXRWYWx1ZSA9PT0gbGFzdElucHV0VmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgIH1cbn07XG5cbnZhciBVdGlsXzEgPSBVdGlsO1xuXG4vKipcbiAqIFByb3BzIEFzc2lnbm1lbnRcbiAqXG4gKiBTZXBhcmF0ZSB0aGlzLCBzbyByZWFjdCBtb2R1bGUgY2FuIHNoYXJlIHRoZSB1c2FnZVxuICovXG52YXIgRGVmYXVsdFByb3BlcnRpZXMgPSB7XG4gICAgLy8gTWF5YmUgY2hhbmdlIHRvIG9iamVjdC1hc3NpZ25cbiAgICAvLyBmb3Igbm93IGp1c3Qga2VlcCBpdCBhcyBzaW1wbGVcbiAgICBhc3NpZ246IGZ1bmN0aW9uICh0YXJnZXQsIG9wdHMpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgICAgICAvLyBjcmVkaXQgY2FyZFxuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZCA9ICEhb3B0cy5jcmVkaXRDYXJkO1xuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZFN0cmljdE1vZGUgPSAhIW9wdHMuY3JlZGl0Q2FyZFN0cmljdE1vZGU7XG4gICAgICAgIHRhcmdldC5jcmVkaXRDYXJkVHlwZSA9ICcnO1xuICAgICAgICB0YXJnZXQub25DcmVkaXRDYXJkVHlwZUNoYW5nZWQgPSBvcHRzLm9uQ3JlZGl0Q2FyZFR5cGVDaGFuZ2VkIHx8IChmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgdGFyZ2V0LnBob25lID0gISFvcHRzLnBob25lO1xuICAgICAgICB0YXJnZXQucGhvbmVSZWdpb25Db2RlID0gb3B0cy5waG9uZVJlZ2lvbkNvZGUgfHwgJ0FVJztcbiAgICAgICAgdGFyZ2V0LnBob25lRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gdGltZVxuICAgICAgICB0YXJnZXQudGltZSA9ICEhb3B0cy50aW1lO1xuICAgICAgICB0YXJnZXQudGltZVBhdHRlcm4gPSBvcHRzLnRpbWVQYXR0ZXJuIHx8IFsnaCcsICdtJywgJ3MnXTtcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXQgPSBvcHRzLnRpbWVGb3JtYXQgfHwgJzI0JztcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXR0ZXIgPSB7fTtcblxuICAgICAgICAvLyBkYXRlXG4gICAgICAgIHRhcmdldC5kYXRlID0gISFvcHRzLmRhdGU7XG4gICAgICAgIHRhcmdldC5kYXRlUGF0dGVybiA9IG9wdHMuZGF0ZVBhdHRlcm4gfHwgWydkJywgJ20nLCAnWSddO1xuICAgICAgICB0YXJnZXQuZGF0ZU1pbiA9IG9wdHMuZGF0ZU1pbiB8fCAnJztcbiAgICAgICAgdGFyZ2V0LmRhdGVNYXggPSBvcHRzLmRhdGVNYXggfHwgJyc7XG4gICAgICAgIHRhcmdldC5kYXRlRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gbnVtZXJhbFxuICAgICAgICB0YXJnZXQubnVtZXJhbCA9ICEhb3B0cy5udW1lcmFsO1xuICAgICAgICB0YXJnZXQubnVtZXJhbEludGVnZXJTY2FsZSA9IG9wdHMubnVtZXJhbEludGVnZXJTY2FsZSA+IDAgPyBvcHRzLm51bWVyYWxJbnRlZ2VyU2NhbGUgOiAwO1xuICAgICAgICB0YXJnZXQubnVtZXJhbERlY2ltYWxTY2FsZSA9IG9wdHMubnVtZXJhbERlY2ltYWxTY2FsZSA+PSAwID8gb3B0cy5udW1lcmFsRGVjaW1hbFNjYWxlIDogMjtcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxEZWNpbWFsTWFyayA9IG9wdHMubnVtZXJhbERlY2ltYWxNYXJrIHx8ICcuJztcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxUaG91c2FuZHNHcm91cFN0eWxlID0gb3B0cy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSB8fCAndGhvdXNhbmQnO1xuICAgICAgICB0YXJnZXQubnVtZXJhbFBvc2l0aXZlT25seSA9ICEhb3B0cy5udW1lcmFsUG9zaXRpdmVPbmx5O1xuICAgICAgICB0YXJnZXQuc3RyaXBMZWFkaW5nWmVyb2VzID0gb3B0cy5zdHJpcExlYWRpbmdaZXJvZXMgIT09IGZhbHNlO1xuICAgICAgICB0YXJnZXQuc2lnbkJlZm9yZVByZWZpeCA9ICEhb3B0cy5zaWduQmVmb3JlUHJlZml4O1xuICAgICAgICB0YXJnZXQudGFpbFByZWZpeCA9ICEhb3B0cy50YWlsUHJlZml4O1xuXG4gICAgICAgIC8vIG90aGVyc1xuICAgICAgICB0YXJnZXQuc3dhcEhpZGRlbklucHV0ID0gISFvcHRzLnN3YXBIaWRkZW5JbnB1dDtcbiAgICAgICAgXG4gICAgICAgIHRhcmdldC5udW1lcmljT25seSA9IHRhcmdldC5jcmVkaXRDYXJkIHx8IHRhcmdldC5kYXRlIHx8ICEhb3B0cy5udW1lcmljT25seTtcblxuICAgICAgICB0YXJnZXQudXBwZXJjYXNlID0gISFvcHRzLnVwcGVyY2FzZTtcbiAgICAgICAgdGFyZ2V0Lmxvd2VyY2FzZSA9ICEhb3B0cy5sb3dlcmNhc2U7XG5cbiAgICAgICAgdGFyZ2V0LnByZWZpeCA9ICh0YXJnZXQuY3JlZGl0Q2FyZCB8fCB0YXJnZXQuZGF0ZSkgPyAnJyA6IChvcHRzLnByZWZpeCB8fCAnJyk7XG4gICAgICAgIHRhcmdldC5ub0ltbWVkaWF0ZVByZWZpeCA9ICEhb3B0cy5ub0ltbWVkaWF0ZVByZWZpeDtcbiAgICAgICAgdGFyZ2V0LnByZWZpeExlbmd0aCA9IHRhcmdldC5wcmVmaXgubGVuZ3RoO1xuICAgICAgICB0YXJnZXQucmF3VmFsdWVUcmltUHJlZml4ID0gISFvcHRzLnJhd1ZhbHVlVHJpbVByZWZpeDtcbiAgICAgICAgdGFyZ2V0LmNvcHlEZWxpbWl0ZXIgPSAhIW9wdHMuY29weURlbGltaXRlcjtcblxuICAgICAgICB0YXJnZXQuaW5pdFZhbHVlID0gKG9wdHMuaW5pdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgb3B0cy5pbml0VmFsdWUgIT09IG51bGwpID8gb3B0cy5pbml0VmFsdWUudG9TdHJpbmcoKSA6ICcnO1xuXG4gICAgICAgIHRhcmdldC5kZWxpbWl0ZXIgPVxuICAgICAgICAgICAgKG9wdHMuZGVsaW1pdGVyIHx8IG9wdHMuZGVsaW1pdGVyID09PSAnJykgPyBvcHRzLmRlbGltaXRlciA6XG4gICAgICAgICAgICAgICAgKG9wdHMuZGF0ZSA/ICcvJyA6XG4gICAgICAgICAgICAgICAgICAgIChvcHRzLnRpbWUgPyAnOicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKG9wdHMubnVtZXJhbCA/ICcsJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdHMucGhvbmUgPyAnICcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICcpKSkpO1xuICAgICAgICB0YXJnZXQuZGVsaW1pdGVyTGVuZ3RoID0gdGFyZ2V0LmRlbGltaXRlci5sZW5ndGg7XG4gICAgICAgIHRhcmdldC5kZWxpbWl0ZXJMYXp5U2hvdyA9ICEhb3B0cy5kZWxpbWl0ZXJMYXp5U2hvdztcbiAgICAgICAgdGFyZ2V0LmRlbGltaXRlcnMgPSBvcHRzLmRlbGltaXRlcnMgfHwgW107XG5cbiAgICAgICAgdGFyZ2V0LmJsb2NrcyA9IG9wdHMuYmxvY2tzIHx8IFtdO1xuICAgICAgICB0YXJnZXQuYmxvY2tzTGVuZ3RoID0gdGFyZ2V0LmJsb2Nrcy5sZW5ndGg7XG5cbiAgICAgICAgdGFyZ2V0LnJvb3QgPSAodHlwZW9mIGNvbW1vbmpzR2xvYmFsID09PSAnb2JqZWN0JyAmJiBjb21tb25qc0dsb2JhbCkgPyBjb21tb25qc0dsb2JhbCA6IHdpbmRvdztcbiAgICAgICAgdGFyZ2V0LmRvY3VtZW50ID0gb3B0cy5kb2N1bWVudCB8fCB0YXJnZXQucm9vdC5kb2N1bWVudDtcblxuICAgICAgICB0YXJnZXQubWF4TGVuZ3RoID0gMDtcblxuICAgICAgICB0YXJnZXQuYmFja3NwYWNlID0gZmFsc2U7XG4gICAgICAgIHRhcmdldC5yZXN1bHQgPSAnJztcblxuICAgICAgICB0YXJnZXQub25WYWx1ZUNoYW5nZWQgPSBvcHRzLm9uVmFsdWVDaGFuZ2VkIHx8IChmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG59O1xuXG52YXIgRGVmYXVsdFByb3BlcnRpZXNfMSA9IERlZmF1bHRQcm9wZXJ0aWVzO1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIG5ldyBDbGVhdmUgaW5zdGFuY2UgYnkgcGFzc2luZyB0aGUgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZyB8IEhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG52YXIgQ2xlYXZlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdHMpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuICAgIHZhciBoYXNNdWx0aXBsZUVsZW1lbnRzID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG93bmVyLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgICBoYXNNdWx0aXBsZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50KS5sZW5ndGggPiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQubGVuZ3RoICE9PSAndW5kZWZpbmVkJyAmJiBlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3duZXIuZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIGhhc011bHRpcGxlRWxlbWVudHMgPSBlbGVtZW50Lmxlbmd0aCA+IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lci5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW93bmVyLmVsZW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbY2xlYXZlLmpzXSBQbGVhc2UgY2hlY2sgdGhlIGVsZW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzTXVsdGlwbGVFbGVtZW50cykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnNvbGUud2FybignW2NsZWF2ZS5qc10gTXVsdGlwbGUgaW5wdXQgZmllbGRzIG1hdGNoZWQsIGNsZWF2ZS5qcyB3aWxsIG9ubHkgdGFrZSB0aGUgZmlyc3Qgb25lLicpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBPbGQgSUVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRzLmluaXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICBvd25lci5wcm9wZXJ0aWVzID0gQ2xlYXZlLkRlZmF1bHRQcm9wZXJ0aWVzLmFzc2lnbih7fSwgb3B0cyk7XG5cbiAgICBvd25lci5pbml0KCk7XG59O1xuXG5DbGVhdmUucHJvdG90eXBlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICAvLyBubyBuZWVkIHRvIHVzZSB0aGlzIGxpYlxuICAgICAgICBpZiAoIXBwcy5udW1lcmFsICYmICFwcHMucGhvbmUgJiYgIXBwcy5jcmVkaXRDYXJkICYmICFwcHMudGltZSAmJiAhcHBzLmRhdGUgJiYgKHBwcy5ibG9ja3NMZW5ndGggPT09IDAgJiYgIXBwcy5wcmVmaXgpKSB7XG4gICAgICAgICAgICBvd25lci5vbklucHV0KHBwcy5pbml0VmFsdWUpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcHMubWF4TGVuZ3RoID0gQ2xlYXZlLlV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuXG4gICAgICAgIG93bmVyLmlzQW5kcm9pZCA9IENsZWF2ZS5VdGlsLmlzQW5kcm9pZCgpO1xuICAgICAgICBvd25lci5sYXN0SW5wdXRWYWx1ZSA9ICcnO1xuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gJyc7XG5cbiAgICAgICAgb3duZXIub25DaGFuZ2VMaXN0ZW5lciA9IG93bmVyLm9uQ2hhbmdlLmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbktleURvd25MaXN0ZW5lciA9IG93bmVyLm9uS2V5RG93bi5iaW5kKG93bmVyKTtcbiAgICAgICAgb3duZXIub25Gb2N1c0xpc3RlbmVyID0gb3duZXIub25Gb2N1cy5iaW5kKG93bmVyKTtcbiAgICAgICAgb3duZXIub25DdXRMaXN0ZW5lciA9IG93bmVyLm9uQ3V0LmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbkNvcHlMaXN0ZW5lciA9IG93bmVyLm9uQ29weS5iaW5kKG93bmVyKTtcblxuICAgICAgICBvd25lci5pbml0U3dhcEhpZGRlbklucHV0KCk7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG93bmVyLm9uQ2hhbmdlTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvd25lci5vbktleURvd25MaXN0ZW5lcik7XG4gICAgICAgIG93bmVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvd25lci5vbkZvY3VzTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIG93bmVyLm9uQ3V0TGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvcHknLCBvd25lci5vbkNvcHlMaXN0ZW5lcik7XG5cblxuICAgICAgICBvd25lci5pbml0UGhvbmVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdERhdGVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdFRpbWVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdE51bWVyYWxGb3JtYXR0ZXIoKTtcblxuICAgICAgICAvLyBhdm9pZCB0b3VjaCBpbnB1dCBmaWVsZCBpZiB2YWx1ZSBpcyBudWxsXG4gICAgICAgIC8vIG90aGVyd2lzZSBGaXJlZm94IHdpbGwgYWRkIHJlZCBib3gtc2hhZG93IGZvciA8aW5wdXQgcmVxdWlyZWQgLz5cbiAgICAgICAgaWYgKHBwcy5pbml0VmFsdWUgfHwgKHBwcy5wcmVmaXggJiYgIXBwcy5ub0ltbWVkaWF0ZVByZWZpeCkpIHtcbiAgICAgICAgICAgIG93bmVyLm9uSW5wdXQocHBzLmluaXRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdFN3YXBIaWRkZW5JbnB1dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuICAgICAgICBpZiAoIXBwcy5zd2FwSGlkZGVuSW5wdXQpIHJldHVybjtcblxuICAgICAgICB2YXIgaW5wdXRGb3JtYXR0ZXIgPSBvd25lci5lbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnB1dEZvcm1hdHRlciwgb3duZXIuZWxlbWVudCk7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudFN3YXBIaWRkZW4gPSBvd25lci5lbGVtZW50O1xuICAgICAgICBvd25lci5lbGVtZW50U3dhcEhpZGRlbi50eXBlID0gJ2hpZGRlbic7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudCA9IGlucHV0Rm9ybWF0dGVyO1xuICAgICAgICBvd25lci5lbGVtZW50LmlkID0gJyc7XG4gICAgfSxcblxuICAgIGluaXROdW1lcmFsRm9ybWF0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKCFwcHMubnVtZXJhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLm51bWVyYWxGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIoXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxNYXJrLFxuICAgICAgICAgICAgcHBzLm51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxTY2FsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgcHBzLnN0cmlwTGVhZGluZ1plcm9lcyxcbiAgICAgICAgICAgIHBwcy5wcmVmaXgsXG4gICAgICAgICAgICBwcHMuc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgIHBwcy50YWlsUHJlZml4LFxuICAgICAgICAgICAgcHBzLmRlbGltaXRlclxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBpbml0VGltZUZvcm1hdHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKCFwcHMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLnRpbWVGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLlRpbWVGb3JtYXR0ZXIocHBzLnRpbWVQYXR0ZXJuLCBwcHMudGltZUZvcm1hdCk7XG4gICAgICAgIHBwcy5ibG9ja3MgPSBwcHMudGltZUZvcm1hdHRlci5nZXRCbG9ja3MoKTtcbiAgICAgICAgcHBzLmJsb2Nrc0xlbmd0aCA9IHBwcy5ibG9ja3MubGVuZ3RoO1xuICAgICAgICBwcHMubWF4TGVuZ3RoID0gQ2xlYXZlLlV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuICAgIH0sXG5cbiAgICBpbml0RGF0ZUZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghcHBzLmRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBwcy5kYXRlRm9ybWF0dGVyID0gbmV3IENsZWF2ZS5EYXRlRm9ybWF0dGVyKHBwcy5kYXRlUGF0dGVybiwgcHBzLmRhdGVNaW4sIHBwcy5kYXRlTWF4KTtcbiAgICAgICAgcHBzLmJsb2NrcyA9IHBwcy5kYXRlRm9ybWF0dGVyLmdldEJsb2NrcygpO1xuICAgICAgICBwcHMuYmxvY2tzTGVuZ3RoID0gcHBzLmJsb2Nrcy5sZW5ndGg7XG4gICAgICAgIHBwcy5tYXhMZW5ndGggPSBDbGVhdmUuVXRpbC5nZXRNYXhMZW5ndGgocHBzLmJsb2Nrcyk7XG4gICAgfSxcblxuICAgIGluaXRQaG9uZUZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghcHBzLnBob25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhdmUuQXNZb3VUeXBlRm9ybWF0dGVyIHNob3VsZCBiZSBwcm92aWRlZCBieVxuICAgICAgICAvLyBleHRlcm5hbCBnb29nbGUgY2xvc3VyZSBsaWJcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBwcy5waG9uZUZvcm1hdHRlciA9IG5ldyBDbGVhdmUuUGhvbmVGb3JtYXR0ZXIoXG4gICAgICAgICAgICAgICAgbmV3IHBwcy5yb290LkNsZWF2ZS5Bc1lvdVR5cGVGb3JtYXR0ZXIocHBzLnBob25lUmVnaW9uQ29kZSksXG4gICAgICAgICAgICAgICAgcHBzLmRlbGltaXRlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW2NsZWF2ZS5qc10gUGxlYXNlIGluY2x1ZGUgcGhvbmUtdHlwZS1mb3JtYXR0ZXIue2NvdW50cnl9LmpzIGxpYicpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBjaGFyQ29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgICAgb3duZXIubGFzdElucHV0VmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gY2hhckNvZGUgPT09IDg7XG4gICAgfSxcblxuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcyxcbiAgICAgICAgICAgIFV0aWwgPSBDbGVhdmUuVXRpbDtcblxuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gb3duZXIuaXNCYWNrd2FyZCB8fCBldmVudC5pbnB1dFR5cGUgPT09ICdkZWxldGVDb250ZW50QmFja3dhcmQnO1xuXG4gICAgICAgIHZhciBwb3N0RGVsaW1pdGVyID0gVXRpbC5nZXRQb3N0RGVsaW1pdGVyKG93bmVyLmxhc3RJbnB1dFZhbHVlLCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycyk7XG5cbiAgICAgICAgaWYgKG93bmVyLmlzQmFja3dhcmQgJiYgcG9zdERlbGltaXRlcikge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBwb3N0RGVsaW1pdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25JbnB1dCh0aGlzLmVsZW1lbnQudmFsdWUpO1xuICAgIH0sXG5cbiAgICBvbkZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuICAgICAgICBvd25lci5sYXN0SW5wdXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgaWYgKHBwcy5wcmVmaXggJiYgcHBzLm5vSW1tZWRpYXRlUHJlZml4ICYmICFvd25lci5lbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9uSW5wdXQocHBzLnByZWZpeCk7XG4gICAgICAgIH1cblxuICAgICAgICBDbGVhdmUuVXRpbC5maXhQcmVmaXhDdXJzb3Iob3duZXIuZWxlbWVudCwgcHBzLnByZWZpeCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgIH0sXG5cbiAgICBvbkN1dDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFDbGVhdmUuVXRpbC5jaGVja0Z1bGxTZWxlY3Rpb24odGhpcy5lbGVtZW50LnZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvcHlDbGlwYm9hcmREYXRhKGUpO1xuICAgICAgICB0aGlzLm9uSW5wdXQoJycpO1xuICAgIH0sXG5cbiAgICBvbkNvcHk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghQ2xlYXZlLlV0aWwuY2hlY2tGdWxsU2VsZWN0aW9uKHRoaXMuZWxlbWVudC52YWx1ZSkpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb3B5Q2xpcGJvYXJkRGF0YShlKTtcbiAgICB9LFxuXG4gICAgY29weUNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWUsXG4gICAgICAgICAgICB0ZXh0VG9Db3B5ID0gJyc7XG5cbiAgICAgICAgaWYgKCFwcHMuY29weURlbGltaXRlcikge1xuICAgICAgICAgICAgdGV4dFRvQ29weSA9IFV0aWwuc3RyaXBEZWxpbWl0ZXJzKGlucHV0VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRUb0NvcHkgPSBpbnB1dFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChlLmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgnVGV4dCcsIHRleHRUb0NvcHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCdUZXh0JywgdGV4dFRvQ29weSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIC8vICBlbXB0eVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uSW5wdXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsO1xuXG4gICAgICAgIC8vIGNhc2UgMTogZGVsZXRlIG9uZSBtb3JlIGNoYXJhY3RlciBcIjRcIlxuICAgICAgICAvLyAxMjM0KnwgLT4gaGl0IGJhY2tzcGFjZSAtPiAxMjN8XG4gICAgICAgIC8vIGNhc2UgMjogbGFzdCBjaGFyYWN0ZXIgaXMgbm90IGRlbGltaXRlciB3aGljaCBpczpcbiAgICAgICAgLy8gMTJ8MzQqIC0+IGhpdCBiYWNrc3BhY2UgLT4gMXwzNCpcbiAgICAgICAgLy8gbm90ZTogbm8gbmVlZCB0byBhcHBseSB0aGlzIGZvciBudW1lcmFsIG1vZGVcbiAgICAgICAgdmFyIHBvc3REZWxpbWl0ZXJBZnRlciA9IFV0aWwuZ2V0UG9zdERlbGltaXRlcih2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoIXBwcy5udW1lcmFsICYmIHBwcy5wb3N0RGVsaW1pdGVyQmFja3NwYWNlICYmICFwb3N0RGVsaW1pdGVyQWZ0ZXIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gVXRpbC5oZWFkU3RyKHZhbHVlLCB2YWx1ZS5sZW5ndGggLSBwcHMucG9zdERlbGltaXRlckJhY2tzcGFjZS5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGhvbmUgZm9ybWF0dGVyXG4gICAgICAgIGlmIChwcHMucGhvbmUpIHtcbiAgICAgICAgICAgIGlmIChwcHMucHJlZml4ICYmICghcHBzLm5vSW1tZWRpYXRlUHJlZml4IHx8IHZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLnByZWZpeCArIHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpLnNsaWNlKHBwcy5wcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9IHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBudW1lcmFsIGZvcm1hdHRlclxuICAgICAgICBpZiAocHBzLm51bWVyYWwpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBzaG93IHByZWZpeCB3aGVuIG5vSW1tZWRpYXRlUHJlZml4IGlzIHNwZWNpZmllZFxuICAgICAgICAgICAgLy8gVGhpcyBtb3N0bHkgYmVjYXVzZSB3ZSBuZWVkIHRvIHNob3cgdXNlciB0aGUgbmF0aXZlIGlucHV0IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBpZiAocHBzLnByZWZpeCAmJiBwcHMubm9JbW1lZGlhdGVQcmVmaXggJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLm51bWVyYWxGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG93bmVyLnVwZGF0ZVZhbHVlU3RhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGF0ZVxuICAgICAgICBpZiAocHBzLmRhdGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcHBzLmRhdGVGb3JtYXR0ZXIuZ2V0VmFsaWRhdGVkRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aW1lXG4gICAgICAgIGlmIChwcHMudGltZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBwcHMudGltZUZvcm1hdHRlci5nZXRWYWxpZGF0ZWRUaW1lKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0cmlwIGRlbGltaXRlcnNcbiAgICAgICAgdmFsdWUgPSBVdGlsLnN0cmlwRGVsaW1pdGVycyh2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuXG4gICAgICAgIC8vIHN0cmlwIHByZWZpeFxuICAgICAgICB2YWx1ZSA9IFV0aWwuZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZSh2YWx1ZSwgcHBzLnByZWZpeCwgcHBzLnByZWZpeExlbmd0aCwgcHBzLnJlc3VsdCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMsIHBwcy5ub0ltbWVkaWF0ZVByZWZpeCwgcHBzLnRhaWxQcmVmaXgsIHBwcy5zaWduQmVmb3JlUHJlZml4KTtcblxuICAgICAgICAvLyBzdHJpcCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzXG4gICAgICAgIHZhbHVlID0gcHBzLm51bWVyaWNPbmx5ID8gVXRpbC5zdHJpcCh2YWx1ZSwgL1teXFxkXS9nKSA6IHZhbHVlO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgY2FzZVxuICAgICAgICB2YWx1ZSA9IHBwcy51cHBlcmNhc2UgPyB2YWx1ZS50b1VwcGVyQ2FzZSgpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gcHBzLmxvd2VyY2FzZSA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiB2YWx1ZTtcblxuICAgICAgICAvLyBwcmV2ZW50IGZyb20gc2hvd2luZyBwcmVmaXggd2hlbiBubyBpbW1lZGlhdGUgb3B0aW9uIGVuYWJsZWQgd2l0aCBlbXB0eSBpbnB1dCB2YWx1ZVxuICAgICAgICBpZiAocHBzLnByZWZpeCkge1xuICAgICAgICAgICAgaWYgKHBwcy50YWlsUHJlZml4KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIHBwcy5wcmVmaXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcHBzLnByZWZpeCArIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIG5vIGJsb2NrcyBzcGVjaWZpZWQsIG5vIG5lZWQgdG8gZG8gZm9ybWF0dGluZ1xuICAgICAgICAgICAgaWYgKHBwcy5ibG9ja3NMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGNyZWRpdCBjYXJkIHByb3BzXG4gICAgICAgIGlmIChwcHMuY3JlZGl0Q2FyZCkge1xuICAgICAgICAgICAgb3duZXIudXBkYXRlQ3JlZGl0Q2FyZFByb3BzQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpcCBvdmVyIGxlbmd0aCBjaGFyYWN0ZXJzXG4gICAgICAgIHZhbHVlID0gVXRpbC5oZWFkU3RyKHZhbHVlLCBwcHMubWF4TGVuZ3RoKTtcblxuICAgICAgICAvLyBhcHBseSBibG9ja3NcbiAgICAgICAgcHBzLnJlc3VsdCA9IFV0aWwuZ2V0Rm9ybWF0dGVkVmFsdWUoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHBwcy5ibG9ja3MsIHBwcy5ibG9ja3NMZW5ndGgsXG4gICAgICAgICAgICBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycywgcHBzLmRlbGltaXRlckxhenlTaG93XG4gICAgICAgICk7XG5cbiAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVDcmVkaXRDYXJkUHJvcHNCeVZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcyxcbiAgICAgICAgICAgIFV0aWwgPSBDbGVhdmUuVXRpbCxcbiAgICAgICAgICAgIGNyZWRpdENhcmRJbmZvO1xuXG4gICAgICAgIC8vIEF0IGxlYXN0IG9uZSBvZiB0aGUgZmlyc3QgNCBjaGFyYWN0ZXJzIGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmIChVdGlsLmhlYWRTdHIocHBzLnJlc3VsdCwgNCkgPT09IFV0aWwuaGVhZFN0cih2YWx1ZSwgNCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWRpdENhcmRJbmZvID0gQ2xlYXZlLkNyZWRpdENhcmREZXRlY3Rvci5nZXRJbmZvKHZhbHVlLCBwcHMuY3JlZGl0Q2FyZFN0cmljdE1vZGUpO1xuXG4gICAgICAgIHBwcy5ibG9ja3MgPSBjcmVkaXRDYXJkSW5mby5ibG9ja3M7XG4gICAgICAgIHBwcy5ibG9ja3NMZW5ndGggPSBwcHMuYmxvY2tzLmxlbmd0aDtcbiAgICAgICAgcHBzLm1heExlbmd0aCA9IFV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuXG4gICAgICAgIC8vIGNyZWRpdCBjYXJkIHR5cGUgY2hhbmdlZFxuICAgICAgICBpZiAocHBzLmNyZWRpdENhcmRUeXBlICE9PSBjcmVkaXRDYXJkSW5mby50eXBlKSB7XG4gICAgICAgICAgICBwcHMuY3JlZGl0Q2FyZFR5cGUgPSBjcmVkaXRDYXJkSW5mby50eXBlO1xuXG4gICAgICAgICAgICBwcHMub25DcmVkaXRDYXJkVHlwZUNoYW5nZWQuY2FsbChvd25lciwgcHBzLmNyZWRpdENhcmRUeXBlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVWYWx1ZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBVdGlsID0gQ2xlYXZlLlV0aWwsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghb3duZXIuZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuZFBvcyA9IG93bmVyLmVsZW1lbnQuc2VsZWN0aW9uRW5kO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBwcHMucmVzdWx0O1xuXG4gICAgICAgIGVuZFBvcyA9IFV0aWwuZ2V0TmV4dEN1cnNvclBvc2l0aW9uKGVuZFBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycyk7XG5cbiAgICAgICAgLy8gZml4IEFuZHJvaWQgYnJvd3NlciB0eXBlPVwidGV4dFwiIGlucHV0IGZpZWxkXG4gICAgICAgIC8vIGN1cnNvciBub3QganVtcGluZyBpc3N1ZVxuICAgICAgICBpZiAob3duZXIuaXNBbmRyb2lkKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIFV0aWwuc2V0U2VsZWN0aW9uKG93bmVyLmVsZW1lbnQsIGVuZFBvcywgcHBzLmRvY3VtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgb3duZXIuY2FsbE9uVmFsdWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB9LCAxKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBpZiAocHBzLnN3YXBIaWRkZW5JbnB1dCkgb3duZXIuZWxlbWVudFN3YXBIaWRkZW4udmFsdWUgPSBvd25lci5nZXRSYXdWYWx1ZSgpO1xuXG4gICAgICAgIFV0aWwuc2V0U2VsZWN0aW9uKG93bmVyLmVsZW1lbnQsIGVuZFBvcywgcHBzLmRvY3VtZW50LCBmYWxzZSk7XG4gICAgICAgIG93bmVyLmNhbGxPblZhbHVlQ2hhbmdlZCgpO1xuICAgIH0sXG5cbiAgICBjYWxsT25WYWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgcHBzLm9uVmFsdWVDaGFuZ2VkLmNhbGwob3duZXIsIHtcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG93bmVyLmVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHBzLnJlc3VsdCxcbiAgICAgICAgICAgICAgICByYXdWYWx1ZTogb3duZXIuZ2V0UmF3VmFsdWUoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0UGhvbmVSZWdpb25Db2RlOiBmdW5jdGlvbiAocGhvbmVSZWdpb25Db2RlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgcHBzLnBob25lUmVnaW9uQ29kZSA9IHBob25lUmVnaW9uQ29kZTtcbiAgICAgICAgb3duZXIuaW5pdFBob25lRm9ybWF0dGVyKCk7XG4gICAgICAgIG93bmVyLm9uQ2hhbmdlKCk7XG4gICAgfSxcblxuICAgIHNldFJhd1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG5cbiAgICAgICAgaWYgKHBwcy5udW1lcmFsKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJy4nLCBwcHMubnVtZXJhbERlY2ltYWxNYXJrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBwcy5wb3N0RGVsaW1pdGVyQmFja3NwYWNlID0gZmFsc2U7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBvd25lci5vbklucHV0KHZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0UmF3VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIHBwcyA9IG93bmVyLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBVdGlsID0gQ2xlYXZlLlV0aWwsXG4gICAgICAgICAgICByYXdWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgaWYgKHBwcy5yYXdWYWx1ZVRyaW1QcmVmaXgpIHtcbiAgICAgICAgICAgIHJhd1ZhbHVlID0gVXRpbC5nZXRQcmVmaXhTdHJpcHBlZFZhbHVlKHJhd1ZhbHVlLCBwcHMucHJlZml4LCBwcHMucHJlZml4TGVuZ3RoLCBwcHMucmVzdWx0LCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycywgcHBzLm5vSW1tZWRpYXRlUHJlZml4LCBwcHMudGFpbFByZWZpeCwgcHBzLnNpZ25CZWZvcmVQcmVmaXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBwcy5udW1lcmFsKSB7XG4gICAgICAgICAgICByYXdWYWx1ZSA9IHBwcy5udW1lcmFsRm9ybWF0dGVyLmdldFJhd1ZhbHVlKHJhd1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhd1ZhbHVlID0gVXRpbC5zdHJpcERlbGltaXRlcnMocmF3VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLmRhdGUgPyBwcHMuZGF0ZUZvcm1hdHRlci5nZXRJU09Gb3JtYXREYXRlKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0VGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLnRpbWUgPyBwcHMudGltZUZvcm1hdHRlci5nZXRJU09Gb3JtYXRUaW1lKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvd25lci5vbkNoYW5nZUxpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb3duZXIub25LZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb3duZXIub25Gb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXQnLCBvd25lci5vbkN1dExpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb3B5Jywgb3duZXIub25Db3B5TGlzdGVuZXIpO1xuICAgIH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ1tDbGVhdmUgT2JqZWN0XSc7XG4gICAgfVxufTtcblxuQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIgPSBOdW1lcmFsRm9ybWF0dGVyXzE7XG5DbGVhdmUuRGF0ZUZvcm1hdHRlciA9IERhdGVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5UaW1lRm9ybWF0dGVyID0gVGltZUZvcm1hdHRlcl8xO1xuQ2xlYXZlLlBob25lRm9ybWF0dGVyID0gUGhvbmVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5DcmVkaXRDYXJkRGV0ZWN0b3IgPSBDcmVkaXRDYXJkRGV0ZWN0b3JfMTtcbkNsZWF2ZS5VdGlsID0gVXRpbF8xO1xuQ2xlYXZlLkRlZmF1bHRQcm9wZXJ0aWVzID0gRGVmYXVsdFByb3BlcnRpZXNfMTtcblxuLy8gZm9yIGFuZ3VsYXIgZGlyZWN0aXZlXG4oKHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpID8gY29tbW9uanNHbG9iYWwgOiB3aW5kb3cpWydDbGVhdmUnXSA9IENsZWF2ZTtcblxuLy8gQ29tbW9uSlNcbnZhciBDbGVhdmVfMSA9IENsZWF2ZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xlYXZlXzE7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * updates the totals summary\n * @param {Array} totals - the totals data\n */\nfunction updateTotals(totals) {\n    $('.shipping-total-cost').text(totals.totalShippingCost);\n    $('.tax-total').text(totals.totalTax);\n    $('.sub-total').text(totals.subTotal);\n    $('.grand-total-sum').text(totals.grandTotal);\n\n    if (totals.orderLevelDiscountTotal.value > 0) {\n        $('.order-discount').removeClass('hide-order-discount');\n        $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);\n    } else {\n        $('.order-discount').addClass('hide-order-discount');\n    }\n\n    if (totals.shippingLevelDiscountTotal.value > 0) {\n        $('.shipping-discount').removeClass('hide-shipping-discount');\n        $('.shipping-discount-total').text('- ' +\n            totals.shippingLevelDiscountTotal.formatted);\n    } else {\n        $('.shipping-discount').addClass('hide-shipping-discount');\n    }\n}\n\n/**\n * updates the order product shipping summary for an order model\n * @param {Object} order - the order model\n */\nfunction updateOrderProductSummaryInformation(order) {\n    var $productSummary = $('<div />');\n    order.shipping.forEach(function (shipping) {\n        shipping.productLineItems.items.forEach(function (lineItem) {\n            var pli = $('[data-product-line-item=' + lineItem.UUID + ']');\n            $productSummary.append(pli);\n        });\n\n        var address = shipping.shippingAddress || {};\n        var selectedMethod = shipping.selectedShippingMethod;\n\n        var nameLine = address.firstName ? address.firstName + ' ' : '';\n        if (address.lastName) nameLine += address.lastName;\n\n        var address1Line = address.address1;\n        var address2Line = address.address2;\n\n        var phoneLine = address.phone;\n\n        var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n        var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n        var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n            ? '( ' + selectedMethod.estimatedArrivalTime + ' )'\n            : '';\n\n        var tmpl = $('#pli-shipping-summary-template').clone();\n\n        if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {\n            $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' '\n                + order.resources.items);\n        } else {\n            $('h5 > span').text('');\n        }\n\n        var stateRequiredAttr = $('#shippingState').attr('required');\n        var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;\n        var stateExists = (shipping.shippingAddress && shipping.shippingAddress.stateCode)\n            ? shipping.shippingAddress.stateCode\n            : false;\n        var stateBoolean = false;\n        if ((isRequired && stateExists) || (!isRequired)) {\n            stateBoolean = true;\n        }\n\n        var shippingForm = $('.multi-shipping input[name=\"shipmentUUID\"][value=\"' + shipping.UUID + '\"]').parent();\n\n        if (shipping.shippingAddress\n            && shipping.shippingAddress.firstName\n            && shipping.shippingAddress.address1\n            && shipping.shippingAddress.city\n            && stateBoolean\n            && shipping.shippingAddress.countryCode\n            && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {\n            $('.ship-to-name', tmpl).text(nameLine);\n            $('.ship-to-address1', tmpl).text(address1Line);\n            $('.ship-to-address2', tmpl).text(address2Line);\n            $('.ship-to-city', tmpl).text(address.city);\n            if (address.stateCode) {\n                $('.ship-to-st', tmpl).text(address.stateCode);\n            }\n            $('.ship-to-zip', tmpl).text(address.postalCode);\n            $('.ship-to-phone', tmpl).text(phoneLine);\n\n            if (!address2Line) {\n                $('.ship-to-address2', tmpl).hide();\n            }\n\n            if (!phoneLine) {\n                $('.ship-to-phone', tmpl).hide();\n            }\n\n            shippingForm.find('.ship-to-message').text('');\n        } else {\n            shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);\n        }\n\n        if (shipping.isGift) {\n            $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        } else {\n            $('.gift-summary', tmpl).addClass('d-none');\n        }\n\n        // checking h5 title shipping to or pickup\n        var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n        $('body').trigger('shipping:updateAddressLabelText',\n            { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\n\n        if (shipping.selectedShippingMethod) {\n            $('.display-name', tmpl).text(methodNameLine);\n            $('.arrival-time', tmpl).text(methodArrivalTime);\n            $('.price', tmpl).text(shippingCost);\n        }\n\n        var $shippingSummary = $('<div class=\"multi-shipping\" data-shipment-summary=\"'\n            + shipping.UUID + '\" />');\n        $shippingSummary.html(tmpl.html());\n        $productSummary.append($shippingSummary);\n    });\n\n    $('.product-summary-block').html($productSummary.html());\n\n    // Also update the line item prices, as they might have been altered\n    $('.grand-total-price').text(order.totals.subTotal);\n    order.items.items.forEach(function (item) {\n        if (item.priceTotal && item.priceTotal.renderedPrice) {\n            $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);\n        }\n    });\n}\n\nmodule.exports = {\n    updateTotals: updateTotals,\n    updateOrderProductSummaryInformation: updateOrderProductSummaryInformation\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},,,,,,,function(module,exports,__webpack_require__){"use strict";eval("\n\nvar processInclude = __webpack_require__(3);\n\n$(document).ready(function () {\n    processInclude(__webpack_require__(4));\n    // If instore pickup module is used, uncomment this\n//    processInclude(require('instorebase/checkout/instore'));\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jYXJ0cmlkZ2VzL2ludF9hZnRlcnBheV9zZnJhL2NhcnRyaWRnZS9jbGllbnQvZGVmYXVsdC9qcy9jaGVja291dC5qcz9mZjFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLENBQVc7O0FBRXhDO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsQ0FBd0I7QUFDbkQ7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBwcm9jZXNzSW5jbHVkZSA9IHJlcXVpcmUoJ2Jhc2UvdXRpbCcpO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzc0luY2x1ZGUocmVxdWlyZSgnYmFzZS9jaGVja291dC9jaGVja291dCcpKTtcbiAgICAvLyBJZiBpbnN0b3JlIHBpY2t1cCBtb2R1bGUgaXMgdXNlZCwgdW5jb21tZW50IHRoaXNcbi8vICAgIHByb2Nlc3NJbmNsdWRlKHJlcXVpcmUoJ2luc3RvcmViYXNlL2NoZWNrb3V0L2luc3RvcmUnKSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n")}]);