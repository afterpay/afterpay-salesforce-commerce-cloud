importPackage(dw.io);
importPackage(dw.net);
importPackage(dw.object);
importPackage(dw.svc);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);

var LogUtils = require('~/cartridge/scripts/util/LogUtils');
var Logger = LogUtils.getLogger("AfterpayHttpService");

var AfterpaySitePreferencesUtilities = require("~/cartridge/scripts/util/AfterpayUtilities").getSitePreferencesUtilities();
var ctrlCartridgeName = AfterpaySitePreferencesUtilities.getControllerCartridgeName();
var Class 		= require(ctrlCartridgeName + '/cartridge/scripts/util/Class').Class;
var AfterpayHttpService = Class.extend({

    init : function() {
        
        this.afterpaySitePreferencesUtilities = AfterpaySitePreferencesUtilities;
    },
	
	
    call : function(urlPath: String, httpVerb : String, requestBody: Object, errorDelegate : Object) {
		
		var endPointUrl , serviceArgs, service, result;
		
        var serviceID : String = this.getServiceID(httpVerb);
		
		
		var service = LocalServiceRegistry.createService(serviceID, {

		     createRequest: function(service:HTTPService, args) {
		         	service.URL += args.endPointUrl;
			        service.setRequestMethod(args.method);
			        service.addHeader('Content-Type', 'application/json');
			        service.addHeader('User-Agent', AfterpaySitePreferencesUtilities.getUserAgent());
			        
			        return JSON.stringify(args.request);
		     },
		     
		     parseResponse : function (service : HTTPService, httpClient : HTTPClient) {
		
				if (httpClient.statusCode == 200 || httpClient.statusCode == 201) {
			    	var parseResponse = httpClient.text;
			    	Logger.debug("Parsed Response : "+ parseResponse);
					return parseResponse;
				}
				else{
					Logger.error("Error on Afterpay request processing : "+ httpClient.getErrorText());
					return httpClient;
				}
				
			}

    	});
		
		serviceArgs = {
			request: requestBody,
			method: requestBody.requestMethod,
			endPointUrl: urlPath
		};
	
		if(urlPath == "payments/capture"){
			service.timeout = AfterpaySitePreferencesUtilities.getCaptureTimeout();
		}
		
		var result : Result;
	    
	    try {
        	
           if (empty(requestBody)) {
                result = service.call();
            }
            else {
                result = service.call(serviceArgs);
            }
        }
        catch(ex) {
            var exception = ex;
            this._logger.error(exception.message);
        }
        
            
	    if(result.status != "OK"){
	    	Logger.error("Error on Afterpay Service execution: "+ result.errorMessage);
	    }
    
        this.logResponseData(urlPath, httpVerb, requestBody, result, false);
        var resultFromDelegate = this.detectErrorResponse(result, httpVerb, errorDelegate, service.URL, requestBody);

        if(!empty(resultFromDelegate)){
            return resultFromDelegate;
        }

        var jsonResponse =  !empty(result.object) ? JSON.parse(result.object) : result;
        
        if(result.status == "SERVICE_UNAVAILABLE" || result.status == "INTERNAL_SERVICE_ERROR"){
        	throw result.status;
        }
        return jsonResponse;
    },
	
	
	
    getServiceID : function(serviceIdentifier : String) {

        switch(serviceIdentifier) {
            case "CREATE_ORDER" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "AUTHORISE_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "DIRECT_CAPTURE_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "GET_PAYMENT" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "GET_CONFIGURATION" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "GET_ORDERS" : return this.afterpaySitePreferencesUtilities.getServiceName();
            case "CREATE_REFUND" : return this.afterpaySitePreferencesUtilities.getServiceName();
        }
        throw new Error("No HTTP service defined for identifier - " + serviceIdentifier);
    },

    detectErrorResponse : function(result : Object, httpVerb : String, errorDelegate : Object, requestUrl : String, requestBody : Object) {
        if (empty(result)) {
            this._logger.error("result was empty");
            throw new Error(this.getErrorResponse("default"));
        }
        else if (!empty(errorDelegate)) {
            return errorDelegate(result);
        }
        else if (result.error != 0 || result.status == "ERROR") {
            this.logErrorResponse(result, requestUrl, requestBody);
            throw JSON.parse(result.errorMessage);
        }
    },

    getErrorResponse : function(errorCode : String) {

        var errorResource = "apierror.flow." + errorCode;
        var defaultMessage = Resource.msg("apierror.flow.default", 'afterpay', null);
        var errorMessage = Resource.msg(errorResource, 'afterpay', defaultMessage);

        if (!empty(errorMessage)) {
            return errorMessage;
        }
        else {
            return defaultMessage;
        }
    },

    logErrorResponse : function(result : Object, requestUrl : String, requestBody : Object) {

        var content: String = "result.error=[" + result.error;
        content += "], result.status=[" + result.status;
        content += "], result.errorMessage=[" + result.errorMessage + "]";

        if(!empty(result.object) && !empty(result.object.text)) {
            content += "], result.object.text=[" + result.object.text + "]";
        }

        if (!empty(requestUrl)) {
            content += ", requestUrl=[" + requestUrl + "]";
        }

        if (!empty(requestBody)) {
            content += ", requestBody=[" + JSON.stringify(requestBody) + "]";
        }

        Logger.error(content);
    },

    logResponseData : function(urlPath: String, httpVerb : String, requestBody: Object, result : Object, errorWasThrown : Boolean) {

        try{
            var message = "";
            var requestBodyJson = JSON.stringify(requestBody);
            var responseBodyJson = result.object;

            if(!empty(result.object) && !empty(result.status == 'OK')) {
                message = StringUtils.format("Response for request urlPath={0}, httpVerb={1}, requestBody=[{2}], responseBody=[{3}]",
                            urlPath,
                            httpVerb,
                            requestBodyJson,
                            responseBodyJson);
            }
            else if(!errorWasThrown) {
                message = StringUtils.format("Response for EMPTY request urlPath={0}, httpVerb={1}, requestBody=[{2}], responseBody=[{3}] - CHECK ERROR LOGS FOR RESPONSE",
                            urlPath,
                            httpVerb,
                            requestBodyJson,
                            result);
            }
            else if(errorWasThrown) {
                message = StringUtils.format("ERROR thrown for request. urlPath={0}, httpVerb={1}, requestBody=[{2}]. SEE previous error logged",
                            urlPath,
                            httpVerb,
                            requestBodyJson);
            }

            if(errorWasThrown) {
                Logger.error(message);
            }
            else {
                Logger.debug(message);
            }
        }
        catch(e) {
            var exception = e;
           Logger.error(exception);
        }
    }
});

module.exports = AfterpayHttpService;