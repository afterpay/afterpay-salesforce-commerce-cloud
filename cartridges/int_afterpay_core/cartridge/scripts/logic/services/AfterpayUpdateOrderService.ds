importPackage(dw.io);
importPackage(dw.net);
importPackage(dw.object);
importPackage(dw.svc);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);
importPackage(dw.order);

var PaymentService = require("~/cartridge/scripts/payment/PaymentService");
var AfterpayDirectCaptureService = require("~/cartridge/scripts/logic/services/AfterpayDirectCapturePaymentService.ds");
var AfterpayAuthoriseService = require("~/cartridge/scripts/logic/services/AfterpayAuthorisePaymentService.ds");
var AfterpaySitePreferencesUtilities = require("~/cartridge/scripts/util/AfterpayUtilities").getSitePreferencesUtilities();
var ctrlCartridgeName = AfterpaySitePreferencesUtilities.getControllerCartridgeName();
var Class 		= require(ctrlCartridgeName + '/cartridge/scripts/util/Class').Class;
var PAYMENT_MODE = require("~/cartridge/scripts/util/AfterpayConstants.js").PAYMENT_MODE;
var PAYMENT_STATUS = require("~/cartridge/scripts/util/AfterpayConstants.js").PAYMENT_STATUS;
var AfterpayUtilities = require("~/cartridge/scripts/util/AfterpayUtilities.js").getAfterpayCheckoutUtilities();
var Transaction = require('dw/system/Transaction');

var UpdateOrderService = Class.extend({

	_logger : null,

	init : function() {
        this.paymentService = PaymentService;
        this.afterpaySitePreferencesUtilities = AfterpaySitePreferencesUtilities;
        this.afterpayDirectCaptureService = AfterpayDirectCaptureService;
        this.afterpayAuthoriseService = AfterpayAuthoriseService;
        this._logger = Logger.getLogger("RequestTrace");
    },

    checkPaymentStatus : function() {
		var orders : SeekableIterator = this._getOrdersNotPaid();

		if(orders.count == 0) {
			return false;
		}

		for each (var order in orders) {
			try {
				var paymentResult = this.loadPaymentResult(order);
				if (!empty(paymentResult)) {
					this.handleOrder(order, paymentResult.status);
				}
			} catch (exception) {
				var e = exception;
				this._logger.error("Error when update the order ID: {0}. Exception Details:\n{1}", order.orderNo, exception);
			}
		}
		return true;
    },

    handleOrder : function (order, paymentStatus, expressCheckoutModel) {
		if(paymentStatus == PAYMENT_STATUS.DECLINED) {
			this.updateDeclinedOrder(order);
			// TODO: send email
		} else if(paymentStatus == PAYMENT_STATUS.FAILED) {
			this.updateFailedOrder(order);
			// TODO: send email
		} else if(paymentStatus == PAYMENT_STATUS.APPROVED) {
			this.handleApprovalOrder(order, expressCheckoutModel);
		} else if (paymentStatus == PAYMENT_STATUS.PENDING) {
			this.handlePendingOrder(order);
		}
    },

    handleApprovalOrder : function (order, expressCheckoutModel) {

		var authoriseDirectCaptureResult = null;

		var authoriseDirectCaptureService = this.getAuthoriseDirectCaptureService(order);

		var paymentAmount = this.getPaymentAmount(order);
		// express checkout needs payment amount, even for direct capture.
		// express checkout with deferred flows needs checksum and delta capture amount.
		// these are all in expressCheckoutModel
		authoriseDirectCaptureService.generateRequest(order, this.getToken(order), order.orderNo, paymentAmount, expressCheckoutModel);
		try {
			authoriseDirectCaptureResult = authoriseDirectCaptureService.getResponse();
		} catch (e) {
			if(e.httpStatusCode == 402) {
				authoriseDirectCaptureResult = {'status' : PAYMENT_STATUS.DECLINED};
			} else {
				throw e;
			}
		}
		this.updateStatusOrder(order, authoriseDirectCaptureResult);
    },


    getAuthoriseDirectCaptureService : function (order) {
    	var paymentMode = AfterpayUtilities.getPaymentMode(order);
    	if(paymentMode == PAYMENT_MODE.AUTHORISE) {
			return this.afterpayAuthoriseService;
		} else {
			return this.afterpayDirectCaptureService;
		}
    },

	handlePendingOrder : function (order) {
		// Do nothing
	},

    loadPaymentResult : function (order) {
    	var paymentID = this.getPaymentID(order);
    	var paymentResult = null;
		if(!empty(paymentID)) {
			this.paymentService.generateRequest(null, paymentID);
			paymentResult = this.paymentService.getResponse();
		}
		return paymentResult;
    },

    getPaymentID : function (order) {
		return order.getPaymentInstruments(PAYMENT_MODE.PAYMENT_METHOD)[0].getPaymentTransaction().custom.apPaymentID;
    },

	getToken : function (order) {
		return order.getPaymentInstruments(PAYMENT_MODE.PAYMENT_METHOD)[0].getPaymentTransaction().custom.apToken;
	},

	// Need amount for express checkouts
	getPaymentAmount : function (order) {
		return order.getPaymentInstruments(PAYMENT_MODE.PAYMENT_METHOD)[0].getPaymentTransaction().amount;
	},

    updateOrder : function (order, status) {
    	Transaction.begin();
    	order.setStatus(status);
    	Transaction.commit();
    },

    updateDeclinedOrder : function (order) {
    	this.updateOrder(order, Order.ORDER_STATUS_CANCELLED);
    },

    updateFailedOrder : function (order) {
    	this.updateOrder(order, Order.ORDER_STATUS_FAILED);
    },

    updateApprovedOrder : function (order) {
    	Transaction.begin();
		order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
		Transaction.commit();
		this._sendOrderConfirmationMail(order);
    },

    updatePendingOrder : function (order) {
    	// Do nothing
    },

    updateStatusOrder : function (order, authoriseDirectCaptureResult) {
		if(!empty(authoriseDirectCaptureResult)) {
			if(authoriseDirectCaptureResult.status == PAYMENT_STATUS.DECLINED) {
				this.updateDeclinedOrder(order);
				// TODO: send email
			} else if(authoriseDirectCaptureResult.status == PAYMENT_STATUS.FAILED) {
				this.updateFailedOrder(order);
				// TODO: send email
			} else if(authoriseDirectCaptureResult.status == PAYMENT_STATUS.APPROVED) {
				this.updateApprovedOrder(order);
			} else if(authoriseDirectCaptureResult.status == PAYMENT_STATUS.PENDING) {
				this.updatePendingOrder(order);
			}
		}

    },

    _getOrdersNotPaid : function() {
		var sortString = "creationDate DESC";
		var queryString = "paymentStatus = {0} AND custom.apIsAfterpayOrder = true";
		return OrderMgr.searchOrders(queryString, sortString, Order.PAYMENT_STATUS_NOTPAID);
    },

    _sendOrderConfirmationMail : function(order: dw.order.Order) {
		var mailSubject = dw.web.Resource.msg('order.orderconfirmation-email.001','order',null)+ " " + order.orderNo;

		var template: Template = new dw.util.Template("mail/orderconfirmationjobschedure.isml");
		var map : HashMap = new HashMap();

		map.put('MailSubject', mailSubject);
		map.put('Order', order);
		var content: MimeEncodedText = template.render(map);

		var mail: Mail = new dw.net.Mail();
		mail.addTo(order.customerEmail);
		mail.setFrom(dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'));
		mail.setSubject(mailSubject);
		mail.setContent(content);
		mail.send();
    },

    _sendDeclinedMail : function(order: dw.order.Order) {

    }
});


module.exports = UpdateOrderService;