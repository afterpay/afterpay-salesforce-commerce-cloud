importPackage(dw.io);
importPackage(dw.net);
importPackage(dw.object);
importPackage(dw.svc);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);

var AfterpayApiContext = require("~/cartridge/scripts/context/AfterpayApiContext");
var AfterpayHttpService = require("~/cartridge/scripts/logic/services/AfterpayHttpService.ds");
var sitePreferences = require("~/cartridge/scripts/util/AfterpayUtilities.js").getSitePreferencesUtilities();
var ctrlCartridgeName = sitePreferences.getControllerCartridgeName();
var Class 		= require(ctrlCartridgeName + '/cartridge/scripts/util/Class').Class;
var LogUtils = require('int_afterpay_core/cartridge/scripts/util/LogUtils');
var Logger = LogUtils.getLogger('AfterpayExpress');

var AuthorisePaymentService = Class.extend({

	 _requestUrl : null,
	 _requestBody : {},

	init : function() {
        this.afterpayHttpService = new AfterpayHttpService();
        this.afterpayApiContext = new AfterpayApiContext();
    },

    generateRequest : function(order: dw.order.Order, token : String, orderNo : String, amount: dw.value.Money, expressCheckoutModel) {
        this._requestUrl = this.afterpayApiContext.getFlowApiUrls().get("authorise");

        if (expressCheckoutModel && expressCheckoutModel.apExpressCheckout) {
            // check the session state:
            let shippingObj = null;
            let itemsObj = null;
            let isCheckoutAdjusted = false;
            if (expressCheckoutModel.apTempShippingAddressChanged ) {
                let CaptureHelpers = require('*/cartridge/scripts/payment/ExpressCaptureHelpers');
                let body = CaptureHelpers.generateItemsAndShippingBody(order);
                shippingObj = body.shipping;
                isCheckoutAdjusted = true;
            }
            if (expressCheckoutModel.apTempBasketItemsChanged) {
                let CaptureHelpers = require('*/cartridge/scripts/payment/ExpressCaptureHelpers');
                let body = CaptureHelpers.generateItemsAndShippingBody(order);
                itemsObj = body.items;
                isCheckoutAdjusted = true;
            }
            // Possibly account for coupons, or possibly other factors
            if (expressCheckoutModel.apTempCheckoutAmountChanged) {
                isCheckoutAdjusted = true;
            }
            // express checkout has 2 types of capture. One is with the Afterpay widget (has checksum)
            // and one does not (usually BuyNow)
            if (expressCheckoutModel.apExpressCheckoutChecksum) {
                this._generateRequestBodyExpressCheckoutWithChecksum(token, orderNo,
                    amount, expressCheckoutModel.apExpressCheckoutChecksum, itemsObj, shippingObj, isCheckoutAdjusted);
            }
            else {
                this._generateRequestBodyExpressCheckout(token, orderNo, amount);
            }
        }
        else {
            this._generateRequestBody(token, orderNo);
        }
    },

    getResponse : function () {
        Logger.debug("Auth request: " + this._requestUrl);
        Logger.debug("Auth body: " + JSON.stringify(this._requestBody));
        var response = this.afterpayHttpService.call(this._requestUrl, "AUTHORISE_PAYMENT", this._requestBody);
        Logger.debug("Auth response: " + JSON.stringify(response));
        return response;
    },
    _generateRequestBody : function (token: String, orderNo: String) {
    	this._requestBody = {
    		"token" : token,
    		"merchantReference" : orderNo,
    		"requestMethod" : 'POST'
    	};
    },
    _generateRequestBodyExpressCheckout : function (token: String, orderNo: String, amount: dw.value.Money) {
    	this._requestBody = {
    		"token" : token,
    		"merchantReference" : orderNo,
    		"requestMethod" : 'POST',
            "amount" : { "amount": amount.value, "currency": amount.currencyCode }
    	};
    },
    _generateRequestBodyExpressCheckoutWithChecksum : function (token: String, orderNo: String, amount: dw.value.Money, checksum: String, itemsObj, shippingObj, isCheckoutAdjusted) {
    	this._requestBody = {
    		"token" : token,
    		"merchantReference" : orderNo,
    		"requestMethod" : 'POST',
            "isCheckoutAdjusted" : isCheckoutAdjusted,
            "amount" : { "amount": amount.value, "currency": amount.currencyCode }
    	};
        if (shippingObj) {
            this._requestBody["shipping"] = shippingObj;
            let test = this._requestBody;
            test = test;
        }
        if (itemsObj) {
            this._requestBody["items"] = itemsObj;
        }
        if (isCheckoutAdjusted || shippingObj || itemsObj) {
            this._requestBody["paymentScheduleChecksum"] = checksum;
        }
    }
});


module.exports = new AuthorisePaymentService();