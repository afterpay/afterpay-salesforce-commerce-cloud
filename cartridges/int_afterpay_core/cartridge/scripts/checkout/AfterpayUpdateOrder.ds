importPackage( dw.system );
importPackage( dw.order );

var PAYMENT_STATUS = require("~/cartridge/scripts/util/AfterpayConstants.js").PAYMENT_STATUS;
var PAYMENT_MODE = require("~/cartridge/scripts/util/AfterpayConstants.js").PAYMENT_MODE;
var Transaction = require('dw/system/Transaction');

function handleUpdateOrder (order, paymentResult, paymentMode) {

	var paymentTransaction = undefined;

	try {
		paymentTransaction = getPaymentTransaction(order);

		if (paymentResult.status != PAYMENT_STATUS.DECLINED) {
			savePaymentTransaction(paymentTransaction, paymentResult, paymentMode);
			saveOrder(order, paymentResult);
		} else {
			savePaymmentTransactionDeclined(paymentTransaction, paymentMode);
		}
	} catch (exception) {
		var e = exception;
		Logger.error(e);
		throw e;
	}
}

function getPaymentTransaction (order : dw.order.Order) {
	var paymentTransaction = undefined;
	paymentTransaction = order.getPaymentInstruments(PAYMENT_MODE.PAYMENT_METHOD)[0].getPaymentTransaction();
	return paymentTransaction;
}

function savePaymmentTransactionDeclined (paymentTransaction : dw.order.PaymentTransaction, paymentMode : String) {

	Transaction.begin();
	paymentTransaction.setPaymentProcessor(getPaymentProcessor());
	paymentTransaction.custom.apPaymentMode = paymentMode;
	paymentTransaction.custom.apInitialStatus = PAYMENT_STATUS.DECLINED;
	paymentTransaction.custom.apToken = null;
	if (paymentMode == PAYMENT_MODE.DIRECT_CAPTURE) {
		paymentTransaction.custom.apDirectPaymentStatus = PAYMENT_STATUS.UNKNOWN;
	} else {
		paymentTransaction.custom.apAuthoriseStatus = PAYMENT_STATUS.UNKNOWN;
	}
	Transaction.commit();

	return paymentTransaction;
}

function savePaymentTransaction (paymentTransaction : dw.order.PaymentTransaction, paymentResult : AfterpayPaymentModel, paymentMode : String) {

	Transaction.begin();
	paymentTransaction.setTransactionID(empty(paymentResult.id) ? null : paymentResult.id);
	paymentTransaction.setAmount(empty(paymentResult.originalAmount) ? null : new dw.value.Money(parseFloat(paymentResult.originalAmount.amount), paymentResult.originalAmount.currency));
	paymentTransaction.setPaymentProcessor(getPaymentProcessor());
	paymentTransaction.custom.apPaymentID = empty(paymentResult.id) ? null : paymentResult.id;
	paymentTransaction.custom.apPaymentMode = paymentMode;
	paymentTransaction.custom.apPaymentEventID = paymentResult.events.length === 0 ? null : paymentResult.events[0].id;

	if (paymentMode == PAYMENT_MODE.DIRECT_CAPTURE) {
		paymentTransaction.custom.apDirectPaymentStatus = paymentResult.status;
	} else {
		paymentTransaction.custom.apAuthoriseStatus = paymentResult.status;
		paymentTransaction.custom.apAuthExpiry = paymentResult.events.length === 0 ? null : paymentResult.events[0].expires;
	}

	Transaction.commit();

	return paymentTransaction;
}

function saveOrder (order : dw.order.Order, paymentResult : AfterpayPaymentModel) {

	Transaction.begin();
	order.custom.apIsAfterpayOrder = true;
	if (paymentResult.status == PAYMENT_STATUS.APPROVED) {
		order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
	} else {
		order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_NOTPAID);
	}

	Transaction.commit();
	return order;
}


function getPaymentProcessor () {
	var paymentProcessor =  dw.order.PaymentMgr.getPaymentMethod(PAYMENT_MODE.PAYMENT_METHOD).paymentProcessor;
	return paymentProcessor;
}

module.exports.HanldeUpdateOrder = handleUpdateOrder;